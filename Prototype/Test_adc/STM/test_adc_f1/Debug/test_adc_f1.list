
test_adc_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c38  08000c38  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c38  08000c38  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000c38  08000c38  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c38  08000c38  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c38  08000c38  00001c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c3c  08000c3c  00001c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000c40  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000c44  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000c44  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000281e  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000af3  00000000  00000000  0000484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000390  00000000  00000000  00005340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000292  00000000  00000000  000056d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a6b  00000000  00000000  00005962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f23  00000000  00000000  000173cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006143b  00000000  00000000  0001a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007b72b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d58  00000000  00000000  0007b770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0007c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c20 	.word	0x08000c20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000c20 	.word	0x08000c20

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	@ (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	@ (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	db0a      	blt.n	80001da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	490c      	ldr	r1, [pc, #48]	@ (80001fc <__NVIC_SetPriority+0x4c>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d8:	e00a      	b.n	80001f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4908      	ldr	r1, [pc, #32]	@ (8000200 <__NVIC_SetPriority+0x50>)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 030f 	and.w	r3, r3, #15
 80001e6:	3b04      	subs	r3, #4
 80001e8:	0112      	lsls	r2, r2, #4
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	440b      	add	r3, r1
 80001ee:	761a      	strb	r2, [r3, #24]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	@ 0x24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	f1c3 0307 	rsb	r3, r3, #7
 800021e:	2b04      	cmp	r3, #4
 8000220:	bf28      	it	cs
 8000222:	2304      	movcs	r3, #4
 8000224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3304      	adds	r3, #4
 800022a:	2b06      	cmp	r3, #6
 800022c:	d902      	bls.n	8000234 <NVIC_EncodePriority+0x30>
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	3b03      	subs	r3, #3
 8000232:	e000      	b.n	8000236 <NVIC_EncodePriority+0x32>
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	43da      	mvns	r2, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	401a      	ands	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024c:	f04f 31ff 	mov.w	r1, #4294967295
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43d9      	mvns	r1, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4313      	orrs	r3, r2
         );
}
 800025e:	4618      	mov	r0, r3
 8000260:	3724      	adds	r7, #36	@ 0x24
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000268:	b480      	push	{r7}
 800026a:	b089      	sub	sp, #36	@ 0x24
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	332c      	adds	r3, #44	@ 0x2c
 8000278:	4619      	mov	r1, r3
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000280:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000284:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000286:	69ba      	ldr	r2, [r7, #24]
 8000288:	fa92 f2a2 	rbit	r2, r2
 800028c:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800028e:	697a      	ldr	r2, [r7, #20]
 8000290:	fab2 f282 	clz	r2, r2
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	40d3      	lsrs	r3, r2
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	440b      	add	r3, r1
 800029c:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	f003 031f 	and.w	r3, r3, #31
 80002a8:	211f      	movs	r1, #31
 80002aa:	fa01 f303 	lsl.w	r3, r1, r3
 80002ae:	43db      	mvns	r3, r3
 80002b0:	401a      	ands	r2, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f003 011f 	and.w	r1, r3, #31
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	f003 031f 	and.w	r3, r3, #31
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	431a      	orrs	r2, r3
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80002c8:	bf00      	nop
 80002ca:	3724      	adds	r7, #36	@ 0x24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr

080002d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b08d      	sub	sp, #52	@ 0x34
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	330c      	adds	r3, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80002ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f0:	69ba      	ldr	r2, [r7, #24]
 80002f2:	fa92 f2a2 	rbit	r2, r2
 80002f6:	617a      	str	r2, [r7, #20]
  return result;
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	40d3      	lsrs	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	440b      	add	r3, r1
 8000306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000312:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000316:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000318:	6a39      	ldr	r1, [r7, #32]
 800031a:	fa91 f1a1 	rbit	r1, r1
 800031e:	61f9      	str	r1, [r7, #28]
  return result;
 8000320:	69f9      	ldr	r1, [r7, #28]
 8000322:	fab1 f181 	clz	r1, r1
 8000326:	b2c9      	uxtb	r1, r1
 8000328:	40cb      	lsrs	r3, r1
 800032a:	2107      	movs	r1, #7
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800033a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800033e:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000342:	fa91 f1a1 	rbit	r1, r1
 8000346:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800034a:	fab1 f181 	clz	r1, r1
 800034e:	b2c9      	uxtb	r1, r1
 8000350:	40cb      	lsrs	r3, r1
 8000352:	6879      	ldr	r1, [r7, #4]
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	431a      	orrs	r2, r3
 800035a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800035c:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800035e:	bf00      	nop
 8000360:	3734      	adds	r7, #52	@ 0x34
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800036c:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <LL_RCC_HSI_Enable+0x18>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a03      	ldr	r2, [pc, #12]	@ (8000380 <LL_RCC_HSI_Enable+0x18>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <LL_RCC_HSI_IsReady+0x20>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0302 	and.w	r3, r3, #2
 8000390:	2b02      	cmp	r3, #2
 8000392:	bf0c      	ite	eq
 8000394:	2301      	moveq	r3, #1
 8000396:	2300      	movne	r3, #0
 8000398:	b2db      	uxtb	r3, r3
}
 800039a:	4618      	mov	r0, r3
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	00db      	lsls	r3, r3, #3
 80003bc:	4903      	ldr	r1, [pc, #12]	@ (80003cc <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003be:	4313      	orrs	r3, r2
 80003c0:	600b      	str	r3, [r1, #0]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <LL_RCC_SetSysClkSource+0x24>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	f023 0203 	bic.w	r2, r3, #3
 80003e0:	4904      	ldr	r1, [pc, #16]	@ (80003f4 <LL_RCC_SetSysClkSource+0x24>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	604b      	str	r3, [r1, #4]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <LL_RCC_GetSysClkSource+0x14>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	f003 030c 	and.w	r3, r3, #12
}
 8000404:	4618      	mov	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <LL_RCC_SetAHBPrescaler+0x24>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000420:	4904      	ldr	r1, [pc, #16]	@ (8000434 <LL_RCC_SetAHBPrescaler+0x24>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	604b      	str	r3, [r1, #4]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000448:	4904      	ldr	r1, [pc, #16]	@ (800045c <LL_RCC_SetAPB1Prescaler+0x24>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4313      	orrs	r3, r2
 800044e:	604b      	str	r3, [r1, #4]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <LL_RCC_SetAPB2Prescaler+0x24>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000470:	4904      	ldr	r1, [pc, #16]	@ (8000484 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	604b      	str	r3, [r1, #4]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <LL_RCC_SetADCClockSource+0x24>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000498:	4904      	ldr	r1, [pc, #16]	@ (80004ac <LL_RCC_SetADCClockSource+0x24>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4313      	orrs	r3, r2
 800049e:	604b      	str	r3, [r1, #4]
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004b8:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ba:	69da      	ldr	r2, [r3, #28]
 80004bc:	4907      	ldr	r1, [pc, #28]	@ (80004dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004c6:	69da      	ldr	r2, [r3, #28]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ea:	699a      	ldr	r2, [r3, #24]
 80004ec:	4907      	ldr	r1, [pc, #28]	@ (800050c <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <LL_APB2_GRP1_EnableClock+0x2c>)
 80004f6:	699a      	ldr	r2, [r3, #24]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4013      	ands	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <LL_FLASH_SetLatency+0x24>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f023 0207 	bic.w	r2, r3, #7
 8000520:	4904      	ldr	r1, [pc, #16]	@ (8000534 <LL_FLASH_SetLatency+0x24>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	600b      	str	r3, [r1, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40022000 	.word	0x40022000

08000538 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <LL_FLASH_GetLatency+0x14>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f003 0307 	and.w	r3, r3, #7
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40022000 	.word	0x40022000

08000550 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800055c:	4a03      	ldr	r2, [pc, #12]	@ (800056c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800055e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000562:	6053      	str	r3, [r2, #4]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40010000 	.word	0x40010000

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff ffb3 	bl	80004e0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800057a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800057e:	f7ff ff97 	bl	80004b0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
 8000584:	f7ff fde2 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000588:	f7ff fe04 	bl	8000194 <__NVIC_GetPriorityGrouping>
 800058c:	4603      	mov	r3, r0
 800058e:	2200      	movs	r2, #0
 8000590:	210f      	movs	r1, #15
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fe36 	bl	8000204 <NVIC_EncodePriority>
 8000598:	4603      	mov	r3, r0
 800059a:	4619      	mov	r1, r3
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f7ff fe06 	bl	80001b0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80005a4:	f7ff ffd4 	bl	8000550 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f806 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f89c 	bl	80006e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b0:	f000 f838 	bl	8000624 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <main+0x44>

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff ffa7 	bl	8000510 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80005c2:	bf00      	nop
 80005c4:	f7ff ffb8 	bl	8000538 <LL_FLASH_GetLatency>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1fa      	bne.n	80005c4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80005ce:	2010      	movs	r0, #16
 80005d0:	f7ff feea 	bl	80003a8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80005d4:	f7ff fec8 	bl	8000368 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80005d8:	bf00      	nop
 80005da:	f7ff fed3 	bl	8000384 <LL_RCC_HSI_IsReady>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d1fa      	bne.n	80005da <SystemClock_Config+0x22>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff ff13 	bl	8000410 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ff24 	bl	8000438 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff ff35 	bl	8000460 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff feea 	bl	80003d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80005fc:	bf00      	nop
 80005fe:	f7ff fefb 	bl	80003f8 <LL_RCC_GetSysClkSource>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1fa      	bne.n	80005fe <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000608:	4805      	ldr	r0, [pc, #20]	@ (8000620 <SystemClock_Config+0x68>)
 800060a:	f000 fac9 	bl	8000ba0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <SystemClock_Config+0x68>)
 8000610:	f000 fad4 	bl	8000bbc <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ff37 	bl	8000488 <LL_RCC_SetADCClockSource>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	007a1200 	.word	0x007a1200

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	@ 0x38
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800062a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000634:	2300      	movs	r3, #0
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000656:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800065a:	f7ff ff41 	bl	80004e0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800065e:	2004      	movs	r0, #4
 8000660:	f7ff ff3e 	bl	80004e0 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000664:	f240 1301 	movw	r3, #257	@ 0x101
 8000668:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4619      	mov	r1, r3
 8000672:	481b      	ldr	r0, [pc, #108]	@ (80006e0 <MX_ADC1_Init+0xbc>)
 8000674:	f000 fa13 	bl	8000a9e <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000680:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000684:	4619      	mov	r1, r3
 8000686:	4817      	ldr	r0, [pc, #92]	@ (80006e4 <MX_ADC1_Init+0xc0>)
 8000688:	f000 f8e4 	bl	8000854 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800068c:	2300      	movs	r3, #0
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000690:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000694:	4619      	mov	r1, r3
 8000696:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <MX_ADC1_Init+0xc0>)
 8000698:	f000 f8aa 	bl	80007f0 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800069c:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 80006a0:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	4619      	mov	r1, r3
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <MX_ADC1_Init+0xc0>)
 80006ba:	f000 f8f2 	bl	80008a2 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80006be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80006c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <MX_ADC1_Init+0xc0>)
 80006c8:	f7ff fdce 	bl	8000268 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80006d2:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_ADC1_Init+0xc0>)
 80006d4:	f7ff fdfd 	bl	80002d2 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3738      	adds	r7, #56	@ 0x38
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40010800 	.word	0x40010800
 80006e4:	40012400 	.word	0x40012400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80006ec:	2004      	movs	r0, #4
 80006ee:	f7ff fef7 	bl	80004e0 <LL_APB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fa:	bf00      	nop
 80006fc:	e7fd      	b.n	80006fa <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	bf00      	nop
 8000704:	e7fd      	b.n	8000702 <HardFault_Handler+0x4>

08000706 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070a:	bf00      	nop
 800070c:	e7fd      	b.n	800070a <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <BusFault_Handler+0x4>

08000716 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071a:	bf00      	nop
 800071c:	e7fd      	b.n	800071a <UsageFault_Handler+0x4>

0800071e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
	...

0800075c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800075c:	f7ff fff7 	bl	800074e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480b      	ldr	r0, [pc, #44]	@ (8000790 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000762:	490c      	ldr	r1, [pc, #48]	@ (8000794 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000764:	4a0c      	ldr	r2, [pc, #48]	@ (8000798 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a09      	ldr	r2, [pc, #36]	@ (800079c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000778:	4c09      	ldr	r4, [pc, #36]	@ (80007a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000786:	f000 fa27 	bl	8000bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff fef1 	bl	8000570 <main>
  bx lr
 800078e:	4770      	bx	lr
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000798:	08000c40 	.word	0x08000c40
  ldr r2, =_sbss
 800079c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007a0:	20000020 	.word	0x20000020

080007a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_2_IRQHandler>

080007a6 <LL_ADC_REG_SetSequencerLength>:
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	2b01      	cmp	r3, #1
 80007dc:	bf0c      	ite	eq
 80007de:	2301      	moveq	r3, #1
 80007e0:	2300      	movne	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
	...

080007f0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80007fe:	4813      	ldr	r0, [pc, #76]	@ (800084c <LL_ADC_CommonInit+0x5c>)
 8000800:	f7ff ffe3 	bl	80007ca <LL_ADC_IsEnabled>
 8000804:	4604      	mov	r4, r0
 8000806:	4812      	ldr	r0, [pc, #72]	@ (8000850 <LL_ADC_CommonInit+0x60>)
 8000808:	f7ff ffdf 	bl	80007ca <LL_ADC_IsEnabled>
 800080c:	4603      	mov	r3, r0
 800080e:	4323      	orrs	r3, r4
 8000810:	2b00      	cmp	r3, #0
 8000812:	d114      	bne.n	800083e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d009      	beq.n	8000830 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	431a      	orrs	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	e008      	b.n	8000842 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	e001      	b.n	8000842 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	40012400 	.word	0x40012400
 8000850:	40012800 	.word	0x40012800

08000854 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffb1 	bl	80007ca <LL_ADC_IsEnabled>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d112      	bne.n	8000894 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	431a      	orrs	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	431a      	orrs	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	e001      	b.n	8000898 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff8a 	bl	80007ca <LL_ADC_IsEnabled>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d131      	bne.n	8000920 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d00c      	beq.n	80008de <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	6859      	ldr	r1, [r3, #4]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	430b      	orrs	r3, r1
 80008d6:	431a      	orrs	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	e008      	b.n	80008f0 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80008f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	6811      	ldr	r1, [r2, #0]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	68d2      	ldr	r2, [r2, #12]
 8000904:	4311      	orrs	r1, r2
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	6912      	ldr	r2, [r2, #16]
 800090a:	430a      	orrs	r2, r1
 800090c:	431a      	orrs	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4619      	mov	r1, r3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff44 	bl	80007a6 <LL_ADC_REG_SetSequencerLength>
 800091e:	e001      	b.n	8000924 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <LL_GPIO_SetPinMode>:
{
 800092e:	b490      	push	{r4, r7}
 8000930:	b088      	sub	sp, #32
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	0e1b      	lsrs	r3, r3, #24
 8000942:	4413      	add	r3, r2
 8000944:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000946:	6822      	ldr	r2, [r4, #0]
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa93 f3a3 	rbit	r3, r3
 8000952:	613b      	str	r3, [r7, #16]
  return result;
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	fab3 f383 	clz	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	210f      	movs	r1, #15
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	401a      	ands	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	fa93 f3a3 	rbit	r3, r3
 8000972:	61bb      	str	r3, [r7, #24]
  return result;
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fab3 f383 	clz	r3, r3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	6023      	str	r3, [r4, #0]
}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bc90      	pop	{r4, r7}
 8000990:	4770      	bx	lr

08000992 <LL_GPIO_SetPinSpeed>:
{
 8000992:	b490      	push	{r4, r7}
 8000994:	b088      	sub	sp, #32
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	461a      	mov	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	0e1b      	lsrs	r3, r3, #24
 80009a6:	4413      	add	r3, r2
 80009a8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80009aa:	6822      	ldr	r2, [r4, #0]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa93 f3a3 	rbit	r3, r3
 80009b6:	613b      	str	r3, [r7, #16]
  return result;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	fab3 f383 	clz	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	2103      	movs	r1, #3
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	401a      	ands	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	fa93 f3a3 	rbit	r3, r3
 80009d6:	61bb      	str	r3, [r7, #24]
  return result;
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fab3 f383 	clz	r3, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	6023      	str	r3, [r4, #0]
}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc90      	pop	{r4, r7}
 80009f4:	4770      	bx	lr

080009f6 <LL_GPIO_SetPinOutputType>:
{
 80009f6:	b490      	push	{r4, r7}
 80009f8:	b088      	sub	sp, #32
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	0e1b      	lsrs	r3, r3, #24
 8000a0a:	4413      	add	r3, r2
 8000a0c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000a0e:	6822      	ldr	r2, [r4, #0]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa93 f3a3 	rbit	r3, r3
 8000a1a:	613b      	str	r3, [r7, #16]
  return result;
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	fab3 f383 	clz	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	2104      	movs	r1, #4
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	401a      	ands	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	fa93 f3a3 	rbit	r3, r3
 8000a3a:	61bb      	str	r3, [r7, #24]
  return result;
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fab3 f383 	clz	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	6023      	str	r3, [r4, #0]
}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc90      	pop	{r4, r7}
 8000a58:	4770      	bx	lr

08000a5a <LL_GPIO_SetPinPull>:
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b087      	sub	sp, #28
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	68da      	ldr	r2, [r3, #12]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	401a      	ands	r2, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	613b      	str	r3, [r7, #16]
  return result;
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	408b      	lsls	r3, r1
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	60da      	str	r2, [r3, #12]
}
 8000a94:	bf00      	nop
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b088      	sub	sp, #32
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	0c1b      	lsrs	r3, r3, #16
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	fa93 f3a3 	rbit	r3, r3
 8000abc:	60fb      	str	r3, [r7, #12]
  return result;
 8000abe:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000ac0:	fab3 f383 	clz	r3, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000ac8:	e044      	b.n	8000b54 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000aca:	2201      	movs	r2, #1
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d03a      	beq.n	8000b4e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2b07      	cmp	r3, #7
 8000adc:	d806      	bhi.n	8000aec <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000ade:	f240 1201 	movw	r2, #257	@ 0x101
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	e008      	b.n	8000afe <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	3b08      	subs	r3, #8
 8000af0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000afc:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	d106      	bne.n	8000b14 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	69b9      	ldr	r1, [r7, #24]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffa3 	bl	8000a5a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	69b9      	ldr	r1, [r7, #24]
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff06 	bl	800092e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d003      	beq.n	8000b32 <LL_GPIO_Init+0x94>
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b09      	cmp	r3, #9
 8000b30:	d10d      	bne.n	8000b4e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	461a      	mov	r2, r3
 8000b38:	69b9      	ldr	r1, [r7, #24]
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ff29 	bl	8000992 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	461a      	mov	r2, r3
 8000b46:	69b9      	ldr	r1, [r7, #24]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff54 	bl	80009f6 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3301      	adds	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1b4      	bne.n	8000aca <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4a07      	ldr	r2, [pc, #28]	@ (8000b9c <LL_InitTick+0x30>)
 8000b80:	3b01      	subs	r3, #1
 8000b82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <LL_InitTick+0x30>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <LL_InitTick+0x30>)
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000ba8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffdd 	bl	8000b6c <LL_InitTick>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000bc4:	4a03      	ldr	r2, [pc, #12]	@ (8000bd4 <LL_SetSystemCoreClock+0x18>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <__libc_init_array>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	2600      	movs	r6, #0
 8000bdc:	4d0c      	ldr	r5, [pc, #48]	@ (8000c10 <__libc_init_array+0x38>)
 8000bde:	4c0d      	ldr	r4, [pc, #52]	@ (8000c14 <__libc_init_array+0x3c>)
 8000be0:	1b64      	subs	r4, r4, r5
 8000be2:	10a4      	asrs	r4, r4, #2
 8000be4:	42a6      	cmp	r6, r4
 8000be6:	d109      	bne.n	8000bfc <__libc_init_array+0x24>
 8000be8:	f000 f81a 	bl	8000c20 <_init>
 8000bec:	2600      	movs	r6, #0
 8000bee:	4d0a      	ldr	r5, [pc, #40]	@ (8000c18 <__libc_init_array+0x40>)
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c1c <__libc_init_array+0x44>)
 8000bf2:	1b64      	subs	r4, r4, r5
 8000bf4:	10a4      	asrs	r4, r4, #2
 8000bf6:	42a6      	cmp	r6, r4
 8000bf8:	d105      	bne.n	8000c06 <__libc_init_array+0x2e>
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c00:	4798      	blx	r3
 8000c02:	3601      	adds	r6, #1
 8000c04:	e7ee      	b.n	8000be4 <__libc_init_array+0xc>
 8000c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c0a:	4798      	blx	r3
 8000c0c:	3601      	adds	r6, #1
 8000c0e:	e7f2      	b.n	8000bf6 <__libc_init_array+0x1e>
 8000c10:	08000c38 	.word	0x08000c38
 8000c14:	08000c38 	.word	0x08000c38
 8000c18:	08000c38 	.word	0x08000c38
 8000c1c:	08000c3c 	.word	0x08000c3c

08000c20 <_init>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr

08000c2c <_fini>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	bf00      	nop
 8000c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c32:	bc08      	pop	{r3}
 8000c34:	469e      	mov	lr, r3
 8000c36:	4770      	bx	lr
