
test_adc_f030f4p6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001068  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001128  08001128  00002128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001140  08001140  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001140  08001140  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001140  08001140  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001140  08001140  00002140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001144  08001144  00002144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001148  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  0800114c  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800114c  00003020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e96  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ec2  00000000  00000000  00005ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00006d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000036a  00000000  00000000  00007240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a5c9  00000000  00000000  000075aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003dd1  00000000  00000000  00011b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000380ed  00000000  00000000  00015944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004da31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f98  00000000  00000000  0004da74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0004ea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001110 	.word	0x08001110

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001110 	.word	0x08001110

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b7f      	cmp	r3, #127	@ 0x7f
 8000234:	d828      	bhi.n	8000288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000236:	4a2f      	ldr	r2, [pc, #188]	@ (80002f4 <__NVIC_SetPriority+0xd4>)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b25b      	sxtb	r3, r3
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	33c0      	adds	r3, #192	@ 0xc0
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	589b      	ldr	r3, [r3, r2]
 8000246:	1dfa      	adds	r2, r7, #7
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	0011      	movs	r1, r2
 800024c:	2203      	movs	r2, #3
 800024e:	400a      	ands	r2, r1
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	21ff      	movs	r1, #255	@ 0xff
 8000254:	4091      	lsls	r1, r2
 8000256:	000a      	movs	r2, r1
 8000258:	43d2      	mvns	r2, r2
 800025a:	401a      	ands	r2, r3
 800025c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	019b      	lsls	r3, r3, #6
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	401a      	ands	r2, r3
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0018      	movs	r0, r3
 800026c:	2303      	movs	r3, #3
 800026e:	4003      	ands	r3, r0
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000274:	481f      	ldr	r0, [pc, #124]	@ (80002f4 <__NVIC_SetPriority+0xd4>)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b25b      	sxtb	r3, r3
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	430a      	orrs	r2, r1
 8000280:	33c0      	adds	r3, #192	@ 0xc0
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000286:	e031      	b.n	80002ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	4a1b      	ldr	r2, [pc, #108]	@ (80002f8 <__NVIC_SetPriority+0xd8>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	0019      	movs	r1, r3
 8000290:	230f      	movs	r3, #15
 8000292:	400b      	ands	r3, r1
 8000294:	3b08      	subs	r3, #8
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	3306      	adds	r3, #6
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	3304      	adds	r3, #4
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1dfa      	adds	r2, r7, #7
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	0011      	movs	r1, r2
 80002a8:	2203      	movs	r2, #3
 80002aa:	400a      	ands	r2, r1
 80002ac:	00d2      	lsls	r2, r2, #3
 80002ae:	21ff      	movs	r1, #255	@ 0xff
 80002b0:	4091      	lsls	r1, r2
 80002b2:	000a      	movs	r2, r1
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	22ff      	movs	r2, #255	@ 0xff
 80002c0:	401a      	ands	r2, r3
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	2303      	movs	r3, #3
 80002ca:	4003      	ands	r3, r0
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <__NVIC_SetPriority+0xd8>)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	001c      	movs	r4, r3
 80002d8:	230f      	movs	r3, #15
 80002da:	4023      	ands	r3, r4
 80002dc:	3b08      	subs	r3, #8
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	430a      	orrs	r2, r1
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18c3      	adds	r3, r0, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	46c0      	nop			@ (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b003      	add	sp, #12
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	2207      	movs	r2, #7
 800030c:	4393      	bics	r3, r2
 800030e:	001a      	movs	r2, r3
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	431a      	orrs	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	615a      	str	r2, [r3, #20]
}
 8000318:	46c0      	nop			@ (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b002      	add	sp, #8
 800031e:	bd80      	pop	{r7, pc}

08000320 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	2204      	movs	r2, #4
 8000330:	4393      	bics	r3, r2
 8000332:	001a      	movs	r2, r3
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	60da      	str	r2, [r3, #12]
}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}

08000344 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	035b      	lsls	r3, r3, #13
 8000356:	0b5b      	lsrs	r3, r3, #13
 8000358:	431a      	orrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800036c:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <LL_RCC_HSI_Enable+0x18>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b03      	ldr	r3, [pc, #12]	@ (8000380 <LL_RCC_HSI_Enable+0x18>)
 8000372:	2101      	movs	r1, #1
 8000374:	430a      	orrs	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	46c0      	nop			@ (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	40021000 	.word	0x40021000

08000384 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000388:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <LL_RCC_HSI_IsReady+0x1c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2202      	movs	r2, #2
 800038e:	4013      	ands	r3, r2
 8000390:	3b02      	subs	r3, #2
 8000392:	425a      	negs	r2, r3
 8000394:	4153      	adcs	r3, r2
 8000396:	b2db      	uxtb	r3, r3
}
 8000398:	0018      	movs	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	40021000 	.word	0x40021000

080003a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	22f8      	movs	r2, #248	@ 0xf8
 80003b2:	4393      	bics	r3, r2
 80003b4:	0019      	movs	r1, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	00da      	lsls	r2, r3, #3
 80003ba:	4b03      	ldr	r3, [pc, #12]	@ (80003c8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003bc:	430a      	orrs	r2, r1
 80003be:	601a      	str	r2, [r3, #0]
}
 80003c0:	46c0      	nop			@ (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b002      	add	sp, #8
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000

080003cc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <LL_RCC_SetSysClkSource+0x24>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	2203      	movs	r2, #3
 80003da:	4393      	bics	r3, r2
 80003dc:	0019      	movs	r1, r3
 80003de:	4b04      	ldr	r3, [pc, #16]	@ (80003f0 <LL_RCC_SetSysClkSource+0x24>)
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	605a      	str	r2, [r3, #4]
}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b002      	add	sp, #8
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	40021000 	.word	0x40021000

080003f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003f8:	4b03      	ldr	r3, [pc, #12]	@ (8000408 <LL_RCC_GetSysClkSource+0x14>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	220c      	movs	r2, #12
 80003fe:	4013      	ands	r3, r2
}
 8000400:	0018      	movs	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <LL_RCC_SetAHBPrescaler+0x24>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	22f0      	movs	r2, #240	@ 0xf0
 800041a:	4393      	bics	r3, r2
 800041c:	0019      	movs	r1, r3
 800041e:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <LL_RCC_SetAHBPrescaler+0x24>)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	430a      	orrs	r2, r1
 8000424:	605a      	str	r2, [r3, #4]
}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	40021000 	.word	0x40021000

08000434 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <LL_RCC_SetAPB1Prescaler+0x24>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	4a06      	ldr	r2, [pc, #24]	@ (800045c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000442:	4013      	ands	r3, r2
 8000444:	0019      	movs	r1, r3
 8000446:	4b04      	ldr	r3, [pc, #16]	@ (8000458 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	430a      	orrs	r2, r1
 800044c:	605a      	str	r2, [r3, #4]
}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	40021000 	.word	0x40021000
 800045c:	fffff8ff 	.word	0xfffff8ff

08000460 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <LL_RCC_SetUSARTClockSource+0x30>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	0e12      	lsrs	r2, r2, #24
 8000470:	2103      	movs	r1, #3
 8000472:	4091      	lsls	r1, r2
 8000474:	000a      	movs	r2, r1
 8000476:	43d2      	mvns	r2, r2
 8000478:	401a      	ands	r2, r3
 800047a:	0011      	movs	r1, r2
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	021b      	lsls	r3, r3, #8
 8000480:	0a1a      	lsrs	r2, r3, #8
 8000482:	4b03      	ldr	r3, [pc, #12]	@ (8000490 <LL_RCC_SetUSARTClockSource+0x30>)
 8000484:	430a      	orrs	r2, r1
 8000486:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000

08000494 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800049c:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <LL_AHB1_GRP1_EnableClock+0x28>)
 800049e:	6959      	ldr	r1, [r3, #20]
 80004a0:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <LL_AHB1_GRP1_EnableClock+0x28>)
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004a8:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <LL_AHB1_GRP1_EnableClock+0x28>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4013      	ands	r3, r2
 80004b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b2:	68fb      	ldr	r3, [r7, #12]
}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b004      	add	sp, #16
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000

080004c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	@ (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	69d9      	ldr	r1, [r3, #28]
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	@ (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <LL_APB1_GRP2_EnableClock+0x28>)
 80004f6:	6999      	ldr	r1, [r3, #24]
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <LL_APB1_GRP2_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	@ (8000514 <LL_APB1_GRP2_EnableClock+0x28>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <LL_FLASH_SetLatency+0x24>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2201      	movs	r2, #1
 8000526:	4393      	bics	r3, r2
 8000528:	0019      	movs	r1, r3
 800052a:	4b04      	ldr	r3, [pc, #16]	@ (800053c <LL_FLASH_SetLatency+0x24>)
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	40022000 	.word	0x40022000

08000540 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000544:	4b03      	ldr	r3, [pc, #12]	@ (8000554 <LL_FLASH_GetLatency+0x14>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	4013      	ands	r3, r2
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	40022000 	.word	0x40022000

08000558 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2201      	movs	r2, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}

08000574 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <LL_USART_ConfigAsyncMode+0x2c>)
 8000582:	401a      	ands	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	2208      	movs	r2, #8
 800058e:	4393      	bics	r3, r2
 8000590:	001a      	movs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	fffff7ff 	.word	0xfffff7ff

080005a4 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80005ac:	f3ef 8310 	mrs	r3, PRIMASK
 80005b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80005b2:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	2301      	movs	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f383 8810 	msr	PRIMASK, r3
}
 80005c0:	46c0      	nop			@ (mov r8, r8)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <LL_USART_DisableIT_CTS+0x40>)
 80005c8:	401a      	ands	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	f383 8810 	msr	PRIMASK, r3
}
 80005d8:	46c0      	nop			@ (mov r8, r8)
}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b006      	add	sp, #24
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	fffffbff 	.word	0xfffffbff

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f7ff ff7d 	bl	80004ec <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	055b      	lsls	r3, r3, #21
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ff62 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 80005fc:	2301      	movs	r3, #1
 80005fe:	425b      	negs	r3, r3
 8000600:	2103      	movs	r1, #3
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff fe0c 	bl	8000220 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f808 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f92a 	bl	8000864 <MX_GPIO_Init>
  MX_ADC_Init();
 8000610:	f000 f838 	bl	8000684 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000614:	f000 f8a8 	bl	8000768 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	e7fd      	b.n	8000618 <main+0x30>

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ff79 	bl	8000518 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	f7ff ff8a 	bl	8000540 <LL_FLASH_GetLatency>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d1fb      	bne.n	8000628 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000630:	f7ff fe9a 	bl	8000368 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	f7ff fea5 	bl	8000384 <LL_RCC_HSI_IsReady>
 800063a:	0003      	movs	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d1fa      	bne.n	8000636 <SystemClock_Config+0x1a>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000640:	2010      	movs	r0, #16
 8000642:	f7ff feaf 	bl	80003a4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fee0 	bl	800040c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800064c:	2000      	movs	r0, #0
 800064e:	f7ff fef1 	bl	8000434 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff feba 	bl	80003cc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	f7ff fecb 	bl	80003f4 <LL_RCC_GetSysClkSource>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d1fb      	bne.n	800065a <SystemClock_Config+0x3e>
  {

  }
  LL_Init1msTick(8000000);
 8000662:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <SystemClock_Config+0x64>)
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fd09 	bl	800107c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800066a:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <SystemClock_Config+0x64>)
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fd15 	bl	800109c <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fef4 	bl	8000460 <LL_RCC_SetUSARTClockSource>
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	007a1200 	.word	0x007a1200

08000684 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b090      	sub	sp, #64	@ 0x40
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800068a:	2530      	movs	r5, #48	@ 0x30
 800068c:	197b      	adds	r3, r7, r5
 800068e:	0018      	movs	r0, r3
 8000690:	2310      	movs	r3, #16
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f000 fd0f 	bl	80010b8 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800069a:	241c      	movs	r4, #28
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2314      	movs	r3, #20
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f000 fd07 	bl	80010b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2318      	movs	r3, #24
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f000 fd00 	bl	80010b8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ff15 	bl	80004ec <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006c2:	2380      	movs	r3, #128	@ 0x80
 80006c4:	029b      	lsls	r3, r3, #10
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff fee4 	bl	8000494 <LL_AHB1_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA0   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2203      	movs	r2, #3
 80006d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	2390      	movs	r3, #144	@ 0x90
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fa3d 	bl	8000b66 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0);
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_ADC_Init+0xe0>)
 80006ee:	2101      	movs	r1, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff fe27 	bl	8000344 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	2280      	movs	r2, #128	@ 0x80
 80006fa:	05d2      	lsls	r2, r2, #23
 80006fc:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80006fe:	197b      	adds	r3, r7, r5
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000704:	197b      	adds	r3, r7, r5
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800070a:	197b      	adds	r3, r7, r5
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000710:	197b      	adds	r3, r7, r5
 8000712:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <MX_ADC_Init+0xe0>)
 8000714:	0019      	movs	r1, r3
 8000716:	0010      	movs	r0, r2
 8000718:	f000 f904 	bl	8000924 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800071c:	0021      	movs	r1, r4
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2201      	movs	r2, #1
 8000734:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800073c:	187b      	adds	r3, r7, r1
 800073e:	4a09      	ldr	r2, [pc, #36]	@ (8000764 <MX_ADC_Init+0xe0>)
 8000740:	0019      	movs	r1, r3
 8000742:	0010      	movs	r0, r2
 8000744:	f000 f924 	bl	8000990 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_ADC_Init+0xe0>)
 800074a:	2100      	movs	r1, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff fde7 	bl	8000320 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000752:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <MX_ADC_Init+0xe0>)
 8000754:	2100      	movs	r1, #0
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff fdd0 	bl	80002fc <LL_ADC_SetSamplingTimeCommonChannels>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b010      	add	sp, #64	@ 0x40
 8000762:	bdb0      	pop	{r4, r5, r7, pc}
 8000764:	40012400 	.word	0x40012400

08000768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b08f      	sub	sp, #60	@ 0x3c
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800076e:	241c      	movs	r4, #28
 8000770:	193b      	adds	r3, r7, r4
 8000772:	0018      	movs	r0, r3
 8000774:	231c      	movs	r3, #28
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	f000 fc9d 	bl	80010b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	0018      	movs	r0, r3
 8000782:	2318      	movs	r3, #24
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f000 fc96 	bl	80010b8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	01db      	lsls	r3, r3, #7
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff feab 	bl	80004ec <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000796:	2380      	movs	r3, #128	@ 0x80
 8000798:	029b      	lsls	r3, r3, #10
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff fe7a 	bl	8000494 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA2   ------> USART1_TX
  PA3   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2204      	movs	r2, #4
 80007a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2202      	movs	r2, #2
 80007aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2203      	movs	r2, #3
 80007b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	1d3a      	adds	r2, r7, #4
 80007c6:	2390      	movs	r3, #144	@ 0x90
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 f9ca 	bl	8000b66 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2208      	movs	r2, #8
 80007d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2202      	movs	r2, #2
 80007dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2203      	movs	r2, #3
 80007e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2201      	movs	r2, #1
 80007f4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	2390      	movs	r3, #144	@ 0x90
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f9b1 	bl	8000b66 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2296      	movs	r2, #150	@ 0x96
 8000808:	0192      	lsls	r2, r2, #6
 800080a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800080c:	0021      	movs	r1, r4
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	220c      	movs	r2, #12
 8000824:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8000832:	187b      	adds	r3, r7, r1
 8000834:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <MX_USART1_UART_Init+0xf8>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f000 fbad 	bl	8000f98 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USART1_UART_Init+0xf8>)
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff feaf 	bl	80005a4 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USART1_UART_Init+0xf8>)
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff fe93 	bl	8000574 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800084e:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <MX_USART1_UART_Init+0xf8>)
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fe81 	bl	8000558 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00f      	add	sp, #60	@ 0x3c
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	40013800 	.word	0x40013800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	029b      	lsls	r3, r3, #10
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff fe11 	bl	8000494 <LL_AHB1_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b4:	f7ff fff7 	bl	80008a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008de:	f000 fbf3 	bl	80010c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e2:	f7ff fe81 	bl	80005e8 <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   r0, =_estack
 80008e8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008f4:	08001148 	.word	0x08001148
  ldr r2, =_sbss
 80008f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008fc:	20000020 	.word	0x20000020

08000900 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_IRQHandler>

08000902 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	3b01      	subs	r3, #1
 8000914:	425a      	negs	r2, r3
 8000916:	4153      	adcs	r3, r2
 8000918:	b2db      	uxtb	r3, r3
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800092e:	230f      	movs	r3, #15
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ffe2 	bl	8000902 <LL_ADC_IsEnabled>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d118      	bne.n	8000974 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	4a11      	ldr	r2, [pc, #68]	@ (800098c <LL_ADC_Init+0x68>)
 8000948:	401a      	ands	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	6859      	ldr	r1, [r3, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	4319      	orrs	r1, r3
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	430b      	orrs	r3, r1
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	089a      	lsrs	r2, r3, #2
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	431a      	orrs	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	611a      	str	r2, [r3, #16]
 8000972:	e003      	b.n	800097c <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000974:	230f      	movs	r3, #15
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800097c:	230f      	movs	r3, #15
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	781b      	ldrb	r3, [r3, #0]
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b004      	add	sp, #16
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	ffff3fc7 	.word	0xffff3fc7

08000990 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800099a:	230f      	movs	r3, #15
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ffac 	bl	8000902 <LL_ADC_IsEnabled>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d115      	bne.n	80009da <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	4a0f      	ldr	r2, [pc, #60]	@ (80009f0 <LL_ADC_REG_Init+0x60>)
 80009b4:	401a      	ands	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	6819      	ldr	r1, [r3, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4319      	orrs	r1, r3
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	4319      	orrs	r1, r3
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	4319      	orrs	r1, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	430b      	orrs	r3, r1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	e003      	b.n	80009e2 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80009da:	230f      	movs	r3, #15
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80009e2:	230f      	movs	r3, #15
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	781b      	ldrb	r3, [r3, #0]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b004      	add	sp, #16
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	fffec23c 	.word	0xfffec23c

080009f4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6819      	ldr	r1, [r3, #0]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	435b      	muls	r3, r3
 8000a08:	001a      	movs	r2, r3
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	189b      	adds	r3, r3, r2
 8000a10:	43db      	mvns	r3, r3
 8000a12:	400b      	ands	r3, r1
 8000a14:	001a      	movs	r2, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	435b      	muls	r3, r3
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	434b      	muls	r3, r1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b004      	add	sp, #16
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	43d2      	mvns	r2, r2
 8000a40:	401a      	ands	r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	434b      	muls	r3, r1
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	605a      	str	r2, [r3, #4]
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6899      	ldr	r1, [r3, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	435b      	muls	r3, r3
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	43db      	mvns	r3, r3
 8000a74:	400b      	ands	r3, r1
 8000a76:	001a      	movs	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	435b      	muls	r3, r3
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	434b      	muls	r3, r1
 8000a80:	431a      	orrs	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	609a      	str	r2, [r3, #8]
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	68d9      	ldr	r1, [r3, #12]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	435b      	muls	r3, r3
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	189b      	adds	r3, r3, r2
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	400b      	ands	r3, r1
 8000aae:	001a      	movs	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	435b      	muls	r3, r3
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	434b      	muls	r3, r1
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	60da      	str	r2, [r3, #12]
}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	6a19      	ldr	r1, [r3, #32]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	435b      	muls	r3, r3
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	4353      	muls	r3, r2
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	435a      	muls	r2, r3
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	400b      	ands	r3, r1
 8000aec:	001a      	movs	r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	435b      	muls	r3, r3
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	434b      	muls	r3, r1
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	434b      	muls	r3, r1
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	434b      	muls	r3, r1
 8000afe:	431a      	orrs	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b004      	add	sp, #16
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	0a12      	lsrs	r2, r2, #8
 8000b24:	4353      	muls	r3, r2
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	0a12      	lsrs	r2, r2, #8
 8000b2a:	4353      	muls	r3, r2
 8000b2c:	68ba      	ldr	r2, [r7, #8]
 8000b2e:	0a12      	lsrs	r2, r2, #8
 8000b30:	435a      	muls	r2, r3
 8000b32:	0013      	movs	r3, r2
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	0a09      	lsrs	r1, r1, #8
 8000b46:	434b      	muls	r3, r1
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	0a09      	lsrs	r1, r1, #8
 8000b4c:	434b      	muls	r3, r1
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	0a09      	lsrs	r1, r1, #8
 8000b52:	434b      	muls	r3, r1
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	434b      	muls	r3, r1
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b004      	add	sp, #16
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000b74:	e048      	b.n	8000c08 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4091      	lsls	r1, r2
 8000b80:	000a      	movs	r2, r1
 8000b82:	4013      	ands	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d03a      	beq.n	8000c02 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d003      	beq.n	8000b9c <LL_GPIO_Init+0x36>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d10e      	bne.n	8000bba <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff ff56 	bl	8000a56 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	6819      	ldr	r1, [r3, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ff39 	bl	8000a2c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	691a      	ldr	r2, [r3, #16]
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff ff63 	bl	8000a8e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d111      	bne.n	8000bf4 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2bff      	cmp	r3, #255	@ 0xff
 8000bd4:	d807      	bhi.n	8000be6 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ff71 	bl	8000ac6 <LL_GPIO_SetAFPin_0_7>
 8000be4:	e006      	b.n	8000bf4 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff ff8c 	bl	8000b0c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fef9 	bl	80009f4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	40da      	lsrs	r2, r3
 8000c10:	1e13      	subs	r3, r2, #0
 8000c12:	d1b0      	bne.n	8000b76 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	0018      	movs	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <LL_RCC_HSI_IsReady>:
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <LL_RCC_HSI_IsReady+0x1c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2202      	movs	r2, #2
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	3b02      	subs	r3, #2
 8000c2e:	425a      	negs	r2, r3
 8000c30:	4153      	adcs	r3, r2
 8000c32:	b2db      	uxtb	r3, r3
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000

08000c40 <LL_RCC_LSE_IsReady>:
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <LL_RCC_LSE_IsReady+0x1c>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	2202      	movs	r2, #2
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	3b02      	subs	r3, #2
 8000c4e:	425a      	negs	r2, r3
 8000c50:	4153      	adcs	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	40021000 	.word	0x40021000

08000c60 <LL_RCC_GetSysClkSource>:
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c64:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <LL_RCC_GetSysClkSource+0x14>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	220c      	movs	r2, #12
 8000c6a:	4013      	ands	r3, r2
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	40021000 	.word	0x40021000

08000c78 <LL_RCC_GetAHBPrescaler>:
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <LL_RCC_GetAHBPrescaler+0x14>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	22f0      	movs	r2, #240	@ 0xf0
 8000c82:	4013      	ands	r3, r2
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	40021000 	.word	0x40021000

08000c90 <LL_RCC_GetAPB1Prescaler>:
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	23e0      	movs	r3, #224	@ 0xe0
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	4013      	ands	r3, r2
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <LL_RCC_GetUSARTClockSource+0x24>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	2103      	movs	r1, #3
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	061b      	lsls	r3, r3, #24
 8000cc2:	4313      	orrs	r3, r2
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <LL_RCC_PLL_GetMainSource+0x14>)
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	025b      	lsls	r3, r3, #9
 8000cdc:	4013      	ands	r3, r2
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	23f0      	movs	r3, #240	@ 0xf0
 8000cf2:	039b      	lsls	r3, r3, #14
 8000cf4:	4013      	ands	r3, r2
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000

08000d00 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <LL_RCC_PLL_GetPrediv+0x14>)
 8000d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d08:	220f      	movs	r2, #15
 8000d0a:	4013      	ands	r3, r2
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	40021000 	.word	0x40021000

08000d18 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d130      	bne.n	8000d8c <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ffbb 	bl	8000ca8 <LL_RCC_GetUSARTClockSource>
 8000d32:	0003      	movs	r3, r0
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d00a      	beq.n	8000d4e <LL_RCC_GetUSARTClockFreq+0x36>
 8000d38:	d818      	bhi.n	8000d6c <LL_RCC_GetUSARTClockFreq+0x54>
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d002      	beq.n	8000d44 <LL_RCC_GetUSARTClockFreq+0x2c>
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d00c      	beq.n	8000d5c <LL_RCC_GetUSARTClockFreq+0x44>
 8000d42:	e013      	b.n	8000d6c <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000d44:	f000 f82a 	bl	8000d9c <RCC_GetSystemClockFreq>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	60fb      	str	r3, [r7, #12]
        break;
 8000d4c:	e01e      	b.n	8000d8c <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000d4e:	f7ff ff67 	bl	8000c20 <LL_RCC_HSI_IsReady>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d017      	beq.n	8000d86 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <LL_RCC_GetUSARTClockFreq+0x80>)
 8000d58:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000d5a:	e014      	b.n	8000d86 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000d5c:	f7ff ff70 	bl	8000c40 <LL_RCC_LSE_IsReady>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d012      	beq.n	8000d8a <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000d6a:	e00e      	b.n	8000d8a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000d6c:	f000 f816 	bl	8000d9c <RCC_GetSystemClockFreq>
 8000d70:	0003      	movs	r3, r0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f838 	bl	8000de8 <RCC_GetHCLKClockFreq>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 f84a 	bl	8000e14 <RCC_GetPCLK1ClockFreq>
 8000d80:	0003      	movs	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
        break;
 8000d84:	e002      	b.n	8000d8c <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	e000      	b.n	8000d8c <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8000d8a:	46c0      	nop			@ (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	007a1200 	.word	0x007a1200

08000d9c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000da6:	f7ff ff5b 	bl	8000c60 <LL_RCC_GetSysClkSource>
 8000daa:	0003      	movs	r3, r0
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d00b      	beq.n	8000dc8 <RCC_GetSystemClockFreq+0x2c>
 8000db0:	d80f      	bhi.n	8000dd2 <RCC_GetSystemClockFreq+0x36>
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <RCC_GetSystemClockFreq+0x20>
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d003      	beq.n	8000dc2 <RCC_GetSystemClockFreq+0x26>
 8000dba:	e00a      	b.n	8000dd2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <RCC_GetSystemClockFreq+0x48>)
 8000dbe:	607b      	str	r3, [r7, #4]
      break;
 8000dc0:	e00a      	b.n	8000dd8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <RCC_GetSystemClockFreq+0x48>)
 8000dc4:	607b      	str	r3, [r7, #4]
      break;
 8000dc6:	e007      	b.n	8000dd8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000dc8:	f000 f838 	bl	8000e3c <RCC_PLL_GetFreqDomain_SYS>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	607b      	str	r3, [r7, #4]
      break;
 8000dd0:	e002      	b.n	8000dd8 <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <RCC_GetSystemClockFreq+0x48>)
 8000dd4:	607b      	str	r3, [r7, #4]
      break;
 8000dd6:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	007a1200 	.word	0x007a1200

08000de8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000df0:	f7ff ff42 	bl	8000c78 <LL_RCC_GetAHBPrescaler>
 8000df4:	0003      	movs	r3, r0
 8000df6:	091b      	lsrs	r3, r3, #4
 8000df8:	220f      	movs	r2, #15
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <RCC_GetHCLKClockFreq+0x28>)
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	001a      	movs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	40d3      	lsrs	r3, r2
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	08001128 	.word	0x08001128

08000e14 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000e1c:	f7ff ff38 	bl	8000c90 <LL_RCC_GetAPB1Prescaler>
 8000e20:	0003      	movs	r3, r0
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <RCC_GetPCLK1ClockFreq+0x24>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	001a      	movs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	40d3      	lsrs	r3, r2
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	08001138 	.word	0x08001138

08000e3c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000e4a:	f7ff ff41 	bl	8000cd0 <LL_RCC_PLL_GetMainSource>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d005      	beq.n	8000e64 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	025b      	lsls	r3, r3, #9
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d003      	beq.n	8000e6a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8000e62:	e005      	b.n	8000e70 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8000e66:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8000e68:	e005      	b.n	8000e76 <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000e6c:	607b      	str	r3, [r7, #4]
      break;
 8000e6e:	e002      	b.n	8000e76 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8000e72:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8000e74:	46c0      	nop			@ (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8000e76:	f7ff ff43 	bl	8000d00 <LL_RCC_PLL_GetPrediv>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	0019      	movs	r1, r3
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff f941 	bl	8000108 <__udivsi3>
 8000e86:	0003      	movs	r3, r0
 8000e88:	001c      	movs	r4, r3
 8000e8a:	f7ff ff2d 	bl	8000ce8 <LL_RCC_PLL_GetMultiplicator>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	0c9b      	lsrs	r3, r3, #18
 8000e92:	220f      	movs	r2, #15
 8000e94:	4013      	ands	r3, r2
 8000e96:	3302      	adds	r3, #2
 8000e98:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b003      	add	sp, #12
 8000ea0:	bd90      	pop	{r4, r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	003d0900 	.word	0x003d0900
 8000ea8:	007a1200 	.word	0x007a1200

08000eac <LL_USART_IsEnabled>:
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <LL_USART_IsEnabled+0x18>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <LL_USART_IsEnabled+0x1a>
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <LL_USART_SetStopBitsLength>:
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <LL_USART_SetStopBitsLength+0x24>)
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	605a      	str	r2, [r3, #4]
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	ffffcfff 	.word	0xffffcfff

08000ef8 <LL_USART_SetHWFlowCtrl>:
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <LL_USART_SetHWFlowCtrl+0x24>)
 8000f08:	401a      	ands	r2, r3
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	609a      	str	r2, [r3, #8]
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	fffffcff 	.word	0xfffffcff

08000f20 <LL_USART_SetBaudRate>:
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	2380      	movs	r3, #128	@ 0x80
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d11c      	bne.n	8000f72 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	005a      	lsls	r2, r3, #1
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	6839      	ldr	r1, [r7, #0]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff f8df 	bl	8000108 <__udivsi3>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <LL_USART_SetBaudRate+0x74>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	085b      	lsrs	r3, r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	001a      	movs	r2, r3
 8000f60:	2307      	movs	r3, #7
 8000f62:	4013      	ands	r3, r2
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	60da      	str	r2, [r3, #12]
}
 8000f70:	e00c      	b.n	8000f8c <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	085a      	lsrs	r2, r3, #1
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff f8c3 	bl	8000108 <__udivsi3>
 8000f82:	0003      	movs	r3, r0
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	001a      	movs	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	60da      	str	r2, [r3, #12]
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b006      	add	sp, #24
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	0000fff0 	.word	0x0000fff0

08000f98 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff ff7b 	bl	8000eac <LL_USART_IsEnabled>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d13b      	bne.n	8001032 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <LL_USART_Init+0xa8>)
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	6859      	ldr	r1, [r3, #4]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	4319      	orrs	r1, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	4319      	orrs	r1, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ff72 	bl	8000ed0 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	695a      	ldr	r2, [r3, #20]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ff7f 	bl	8000ef8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <LL_USART_Init+0xac>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d104      	bne.n	800100c <LL_USART_Init+0x74>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fe88 	bl	8000d18 <LL_RCC_GetUSARTClockFreq>
 8001008:	0003      	movs	r3, r0
 800100a:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00f      	beq.n	8001032 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00b      	beq.n	8001032 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 800101a:	230f      	movs	r3, #15
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff77 	bl	8000f20 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001032:	230f      	movs	r3, #15
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	781b      	ldrb	r3, [r3, #0]
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b004      	add	sp, #16
 800103e:	bd80      	pop	{r7, pc}
 8001040:	ffff69f3 	.word	0xffff69f3
 8001044:	40013800 	.word	0x40013800

08001048 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001052:	6839      	ldr	r1, [r7, #0]
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff f857 	bl	8000108 <__udivsi3>
 800105a:	0003      	movs	r3, r0
 800105c:	001a      	movs	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <LL_InitTick+0x30>)
 8001060:	3a01      	subs	r2, #1
 8001062:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001064:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <LL_InitTick+0x30>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <LL_InitTick+0x30>)
 800106c:	2205      	movs	r2, #5
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}
 8001078:	e000e010 	.word	0xe000e010

0800107c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001084:	23fa      	movs	r3, #250	@ 0xfa
 8001086:	009a      	lsls	r2, r3, #2
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	0011      	movs	r1, r2
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ffdb 	bl	8001048 <LL_InitTick>
}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <LL_SetSystemCoreClock+0x18>)
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	20000000 	.word	0x20000000

080010b8 <memset>:
 80010b8:	0003      	movs	r3, r0
 80010ba:	1882      	adds	r2, r0, r2
 80010bc:	4293      	cmp	r3, r2
 80010be:	d100      	bne.n	80010c2 <memset+0xa>
 80010c0:	4770      	bx	lr
 80010c2:	7019      	strb	r1, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	e7f9      	b.n	80010bc <memset+0x4>

080010c8 <__libc_init_array>:
 80010c8:	b570      	push	{r4, r5, r6, lr}
 80010ca:	2600      	movs	r6, #0
 80010cc:	4c0c      	ldr	r4, [pc, #48]	@ (8001100 <__libc_init_array+0x38>)
 80010ce:	4d0d      	ldr	r5, [pc, #52]	@ (8001104 <__libc_init_array+0x3c>)
 80010d0:	1b64      	subs	r4, r4, r5
 80010d2:	10a4      	asrs	r4, r4, #2
 80010d4:	42a6      	cmp	r6, r4
 80010d6:	d109      	bne.n	80010ec <__libc_init_array+0x24>
 80010d8:	2600      	movs	r6, #0
 80010da:	f000 f819 	bl	8001110 <_init>
 80010de:	4c0a      	ldr	r4, [pc, #40]	@ (8001108 <__libc_init_array+0x40>)
 80010e0:	4d0a      	ldr	r5, [pc, #40]	@ (800110c <__libc_init_array+0x44>)
 80010e2:	1b64      	subs	r4, r4, r5
 80010e4:	10a4      	asrs	r4, r4, #2
 80010e6:	42a6      	cmp	r6, r4
 80010e8:	d105      	bne.n	80010f6 <__libc_init_array+0x2e>
 80010ea:	bd70      	pop	{r4, r5, r6, pc}
 80010ec:	00b3      	lsls	r3, r6, #2
 80010ee:	58eb      	ldr	r3, [r5, r3]
 80010f0:	4798      	blx	r3
 80010f2:	3601      	adds	r6, #1
 80010f4:	e7ee      	b.n	80010d4 <__libc_init_array+0xc>
 80010f6:	00b3      	lsls	r3, r6, #2
 80010f8:	58eb      	ldr	r3, [r5, r3]
 80010fa:	4798      	blx	r3
 80010fc:	3601      	adds	r6, #1
 80010fe:	e7f2      	b.n	80010e6 <__libc_init_array+0x1e>
 8001100:	08001140 	.word	0x08001140
 8001104:	08001140 	.word	0x08001140
 8001108:	08001144 	.word	0x08001144
 800110c:	08001140 	.word	0x08001140

08001110 <_init>:
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001116:	bc08      	pop	{r3}
 8001118:	469e      	mov	lr, r3
 800111a:	4770      	bx	lr

0800111c <_fini>:
 800111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001122:	bc08      	pop	{r3}
 8001124:	469e      	mov	lr, r3
 8001126:	4770      	bx	lr
