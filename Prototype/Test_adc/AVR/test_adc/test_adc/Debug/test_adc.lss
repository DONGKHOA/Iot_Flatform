
test_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a72  00000b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800108  00800108  00000b0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001587  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b41  00000000  00000000  00002293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6a  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000488  00000000  00000000  00003b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000751  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e86  00000000  00000000  00004719  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000559f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_20>
  54:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_28>
  74:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_29>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e7       	ldi	r30, 0x72	; 114
  90:	fa e0       	ldi	r31, 0x0A	; 10
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 30       	cpi	r26, 0x08	; 8
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a8 e0       	ldi	r26, 0x08	; 8
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 3a       	cpi	r26, 0xAE	; 174
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  b2:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_read>:


uint16_t adc_read(unsigned char channel)
{
    // Start ADC conversion by setting the ADSC bit in ADCSRA
    ADCSRA |= (1 << ADSC);
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24

    // Wait for conversion to complete (ADIF bit in ADCSRA becomes 1)
    while (!(ADCSRA & (1 << ADIF)));
  c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c8:	84 ff       	sbrs	r24, 4
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <adc_read+0xa>

    // Clear ADIF by writing a 1 to it (this is done by writing a 1 to the ADIF bit)
    ADCSRA |= (1 << ADIF);
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	80 83       	st	Z, r24

    return (ADCH << 8) | ADCL;
  d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	98 2f       	mov	r25, r24
  de:	88 27       	eor	r24, r24
  e0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
}
  e4:	82 2b       	or	r24, r18
  e6:	08 95       	ret

000000e8 <rbuffer_init>:


volatile ringbuffer_t * uart_get_uart1_rx_buffer_address(void)
{
	return &(p_UART1_meta->rb_rx);
}
  e8:	fc 01       	movw	r30, r24
  ea:	9f b7       	in	r25, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	04 c0       	rjmp	.+8      	; 0xfa <rbuffer_init+0x12>
  f2:	10 a2       	std	Z+32, r1	; 0x20
  f4:	11 a2       	std	Z+33, r1	; 0x21
  f6:	12 a2       	std	Z+34, r1	; 0x22
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	81 11       	cpse	r24, r1
  fc:	fa cf       	rjmp	.-12     	; 0xf2 <rbuffer_init+0xa>
  fe:	9f bf       	out	0x3f, r25	; 63
 100:	08 95       	ret

00000102 <rbuffer_full>:
 102:	fc 01       	movw	r30, r24
 104:	92 a1       	ldd	r25, Z+34	; 0x22
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 32       	cpi	r25, 0x20	; 32
 10a:	09 f0       	breq	.+2      	; 0x10e <rbuffer_full+0xc>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret

00000110 <rbuffer_empty>:
 110:	fc 01       	movw	r30, r24
 112:	92 a1       	ldd	r25, Z+34	; 0x22
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	91 11       	cpse	r25, r1
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <rbuffer_insert>:
 11c:	fb 01       	movw	r30, r22
 11e:	90 a1       	ldd	r25, Z+32	; 0x20
 120:	db 01       	movw	r26, r22
 122:	a9 0f       	add	r26, r25
 124:	b1 1d       	adc	r27, r1
 126:	8c 93       	st	X, r24
 128:	9f b7       	in	r25, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 c0       	rjmp	.+16     	; 0x140 <rbuffer_insert+0x24>
 130:	80 a1       	ldd	r24, Z+32	; 0x20
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	8f 71       	andi	r24, 0x1F	; 31
 136:	80 a3       	std	Z+32, r24	; 0x20
 138:	82 a1       	ldd	r24, Z+34	; 0x22
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	82 a3       	std	Z+34, r24	; 0x22
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	81 11       	cpse	r24, r1
 142:	f6 cf       	rjmp	.-20     	; 0x130 <rbuffer_insert+0x14>
 144:	9f bf       	out	0x3f, r25	; 63
 146:	08 95       	ret

00000148 <rbuffer_remove>:
 148:	fc 01       	movw	r30, r24
 14a:	81 a1       	ldd	r24, Z+33	; 0x21
 14c:	df 01       	movw	r26, r30
 14e:	a8 0f       	add	r26, r24
 150:	b1 1d       	adc	r27, r1
 152:	8c 91       	ld	r24, X
 154:	2f b7       	in	r18, 0x3f	; 63
 156:	f8 94       	cli
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	08 c0       	rjmp	.+16     	; 0x16c <rbuffer_remove+0x24>
 15c:	91 a1       	ldd	r25, Z+33	; 0x21
 15e:	9f 5f       	subi	r25, 0xFF	; 255
 160:	9f 71       	andi	r25, 0x1F	; 31
 162:	91 a3       	std	Z+33, r25	; 0x21
 164:	92 a1       	ldd	r25, Z+34	; 0x22
 166:	91 50       	subi	r25, 0x01	; 1
 168:	92 a3       	std	Z+34, r25	; 0x22
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	91 11       	cpse	r25, r1
 16e:	f6 cf       	rjmp	.-20     	; 0x15c <rbuffer_remove+0x14>
 170:	2f bf       	out	0x3f, r18	; 63
 172:	08 95       	ret

00000174 <usart0_init>:
 174:	8a b1       	in	r24, 0x0a	; 10
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	8a b9       	out	0x0a, r24	; 10
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <p_UART0_meta>
 184:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 188:	83 96       	adiw	r24, 0x23	; 35
 18a:	0e 94 74 00 	call	0xe8	; 0xe8 <rbuffer_init>
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <p_UART0_meta>
 192:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 196:	0e 94 74 00 	call	0xe8	; 0xe8 <rbuffer_init>
 19a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 19e:	83 e3       	ldi	r24, 0x33	; 51
 1a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1a4:	e1 ec       	ldi	r30, 0xC1	; 193
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	88 69       	ori	r24, 0x98	; 152
 1ac:	80 83       	st	Z, r24
 1ae:	e2 ec       	ldi	r30, 0xC2	; 194
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	80 83       	st	Z, r24
 1b8:	78 94       	sei
 1ba:	08 95       	ret

000001bc <usart0_send_char>:
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
 1c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <p_UART0_meta>
 1c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 1c8:	83 96       	adiw	r24, 0x23	; 35
 1ca:	0e 94 81 00 	call	0x102	; 0x102 <rbuffer_full>
 1ce:	81 11       	cpse	r24, r1
 1d0:	f7 cf       	rjmp	.-18     	; 0x1c0 <usart0_send_char+0x4>
 1d2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <p_UART0_meta>
 1d6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 1da:	6d 5d       	subi	r22, 0xDD	; 221
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	8c 2f       	mov	r24, r28
 1e0:	0e 94 8e 00 	call	0x11c	; 0x11c <rbuffer_insert>
 1e4:	e1 ec       	ldi	r30, 0xC1	; 193
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	80 83       	st	Z, r24
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <usart0_send_string>:
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ec 01       	movw	r28, r24
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <usart0_send_string+0xe>
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <usart0_send_char>
 200:	88 81       	ld	r24, Y
 202:	81 11       	cpse	r24, r1
 204:	fa cf       	rjmp	.-12     	; 0x1fa <usart0_send_string+0x8>
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <__vector_20>:

// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
// ISR FUNCTIONS
#ifdef USART0_ENABLE

ISR(USART0_RX_vect) {
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	cf 93       	push	r28
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	
   char	data = UDR0;
 230:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    if(!rbuffer_full(&p_UART0_meta->rb_rx)) {
 234:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <p_UART0_meta>
 238:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 23c:	0e 94 81 00 	call	0x102	; 0x102 <rbuffer_full>
 240:	81 11       	cpse	r24, r1
 242:	14 c0       	rjmp	.+40     	; 0x26c <__vector_20+0x60>
	    rbuffer_insert(data, &p_UART0_meta->rb_rx);
 244:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <p_UART0_meta>
 248:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 8e 00 	call	0x11c	; 0x11c <rbuffer_insert>
	    p_UART0_meta->usart_error = UCSR0A & USART_RX_ERROR_MASK ;
 252:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <p_UART0_meta>
 256:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 25a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 25e:	8c 71       	andi	r24, 0x1C	; 28
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	ea 5b       	subi	r30, 0xBA	; 186
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	91 83       	std	Z+1, r25	; 0x01
 268:	80 83       	st	Z, r24
 26a:	0d c0       	rjmp	.+26     	; 0x286 <__vector_20+0x7a>

    }
    else {
	    p_UART0_meta->usart_error = ((UCSR0A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW>>8);
 26c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <p_UART0_meta>
 270:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 274:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 278:	8c 71       	andi	r24, 0x1C	; 28
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	ea 5b       	subi	r30, 0xBA	; 186
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	91 83       	std	Z+1, r25	; 0x01
 284:	80 83       	st	Z, r24
    }   
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	cf 91       	pop	r28
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_21>:
ISR(USART0_UDRE_vect) {
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART0_meta->rb_tx)) {
 2cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <p_UART0_meta>
 2d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 2d4:	83 96       	adiw	r24, 0x23	; 35
 2d6:	0e 94 88 00 	call	0x110	; 0x110 <rbuffer_empty>
 2da:	81 11       	cpse	r24, r1
 2dc:	0a c0       	rjmp	.+20     	; 0x2f2 <__vector_21+0x48>
	    UDR0 = rbuffer_remove(&p_UART0_meta->rb_tx);
 2de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <p_UART0_meta>
 2e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <p_UART0_meta+0x1>
 2e6:	83 96       	adiw	r24, 0x23	; 35
 2e8:	0e 94 a4 00 	call	0x148	; 0x148 <rbuffer_remove>
 2ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <__vector_21+0x52>
    }
    else {
	    UCSR0B &= ~(1 << UDRE0);                   // Enable Tx buffer empty interrupt 
 2f2:	e1 ec       	ldi	r30, 0xC1	; 193
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	80 83       	st	Z, r24
    }
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_28>:
#endif

#ifdef USART1_ENABLE
ISR(USART1_RX_vect) {
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	cf 93       	push	r28
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	
   char	data = UDR1;
 342:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    if(!rbuffer_full(&p_UART1_meta->rb_rx)) {
 346:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 34a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 34e:	0e 94 81 00 	call	0x102	; 0x102 <rbuffer_full>
 352:	81 11       	cpse	r24, r1
 354:	14 c0       	rjmp	.+40     	; 0x37e <__vector_28+0x60>
	    rbuffer_insert(data, &p_UART1_meta->rb_rx);
 356:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 35a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35e:	8c 2f       	mov	r24, r28
 360:	0e 94 8e 00 	call	0x11c	; 0x11c <rbuffer_insert>
	    p_UART1_meta->usart_error = UCSR1A & USART_RX_ERROR_MASK ;
 364:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 368:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 370:	8c 71       	andi	r24, 0x1C	; 28
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	ea 5b       	subi	r30, 0xBA	; 186
 376:	ff 4f       	sbci	r31, 0xFF	; 255
 378:	91 83       	std	Z+1, r25	; 0x01
 37a:	80 83       	st	Z, r24
 37c:	0d c0       	rjmp	.+26     	; 0x398 <__vector_28+0x7a>

    }
    else {
	    p_UART1_meta->usart_error = ((UCSR1A & USART_RX_ERROR_MASK) | USART_BUFFER_OVERFLOW);
 37e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 382:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 386:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 38a:	8c 71       	andi	r24, 0x1C	; 28
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	91 60       	ori	r25, 0x01	; 1
 390:	ea 5b       	subi	r30, 0xBA	; 186
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	91 83       	std	Z+1, r25	; 0x01
 396:	80 83       	st	Z, r24
    }   
}
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	cf 91       	pop	r28
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_29>:
ISR(USART1_UDRE_vect) {
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
    if(!rbuffer_empty(&p_UART1_meta->rb_tx)) {
 3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e6:	83 96       	adiw	r24, 0x23	; 35
 3e8:	0e 94 88 00 	call	0x110	; 0x110 <rbuffer_empty>
 3ec:	81 11       	cpse	r24, r1
 3ee:	0a c0       	rjmp	.+20     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	    UDR1 = rbuffer_remove(&p_UART1_meta->rb_tx);
 3f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f8:	83 96       	adiw	r24, 0x23	; 35
 3fa:	0e 94 a4 00 	call	0x148	; 0x148 <rbuffer_remove>
 3fe:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 402:	05 c0       	rjmp	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		
    }
    else {
	    UCSR1B &= ~(1 << UDRE1);                   // Enable Tx buffer empty interrupt 
 404:	e9 ec       	ldi	r30, 0xC9	; 201
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	8f 7d       	andi	r24, 0xDF	; 223
 40c:	80 83       	st	Z, r24
    }
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <ADC_Init>:
uint16_t data;
char str_data[20];

void ADC_Init()
{
	ADMUX = (1<<REFS0);			//avcc
 430:	80 e4       	ldi	r24, 0x40	; 64
 432:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1);
 436:	86 ee       	ldi	r24, 0xE6	; 230
 438:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 43c:	08 95       	ret

0000043e <main>:
}

int main(void)
{
	DDRA |= 0x00;
 43e:	81 b1       	in	r24, 0x01	; 1
 440:	81 b9       	out	0x01, r24	; 1
	PORTA = 0;
 442:	12 b8       	out	0x02, r1	; 2
    usart0_init();
 444:	0e 94 ba 00 	call	0x174	; 0x174 <usart0_init>
	ADC_Init();
 448:	0e 94 18 02 	call	0x430	; 0x430 <ADC_Init>
	
    while (1) 
    {
		data = adc_read(PINA0);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 5d 00 	call	0xba	; 0xba <adc_read>
 452:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <data>
 456:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <data+0x1>
		sprintf(str_data,"%d\n", data);
 45a:	9f 93       	push	r25
 45c:	8f 93       	push	r24
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	9f 93       	push	r25
 464:	8f 93       	push	r24
 466:	8a e9       	ldi	r24, 0x9A	; 154
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	9f 93       	push	r25
 46c:	8f 93       	push	r24
 46e:	0e 94 4d 02 	call	0x49a	; 0x49a <sprintf>
		/*itoa(data, str_data, 10);*/
		usart0_send_string(str_data);
 472:	8a e9       	ldi	r24, 0x9A	; 154
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <usart0_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	84 e3       	ldi	r24, 0x34	; 52
 47e:	9c e0       	ldi	r25, 0x0C	; 12
 480:	21 50       	subi	r18, 0x01	; 1
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <main+0x42>
 488:	00 c0       	rjmp	.+0      	; 0x48a <main+0x4c>
 48a:	00 00       	nop
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	d9 cf       	rjmp	.-78     	; 0x44c <main+0xe>

0000049a <sprintf>:
 49a:	ae e0       	ldi	r26, 0x0E	; 14
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e3 e5       	ldi	r30, 0x53	; 83
 4a0:	f2 e0       	ldi	r31, 0x02	; 2
 4a2:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__prologue_saves__+0x1c>
 4a6:	0d 89       	ldd	r16, Y+21	; 0x15
 4a8:	1e 89       	ldd	r17, Y+22	; 0x16
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	8c 83       	std	Y+4, r24	; 0x04
 4ae:	1a 83       	std	Y+2, r17	; 0x02
 4b0:	09 83       	std	Y+1, r16	; 0x01
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	9f e7       	ldi	r25, 0x7F	; 127
 4b6:	9e 83       	std	Y+6, r25	; 0x06
 4b8:	8d 83       	std	Y+5, r24	; 0x05
 4ba:	ae 01       	movw	r20, r28
 4bc:	47 5e       	subi	r20, 0xE7	; 231
 4be:	5f 4f       	sbci	r21, 0xFF	; 255
 4c0:	6f 89       	ldd	r22, Y+23	; 0x17
 4c2:	78 8d       	ldd	r23, Y+24	; 0x18
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	0e 94 6f 02 	call	0x4de	; 0x4de <vfprintf>
 4cc:	ef 81       	ldd	r30, Y+7	; 0x07
 4ce:	f8 85       	ldd	r31, Y+8	; 0x08
 4d0:	e0 0f       	add	r30, r16
 4d2:	f1 1f       	adc	r31, r17
 4d4:	10 82       	st	Z, r1
 4d6:	2e 96       	adiw	r28, 0x0e	; 14
 4d8:	e4 e0       	ldi	r30, 0x04	; 4
 4da:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__epilogue_restores__+0x1c>

000004de <vfprintf>:
 4de:	ab e0       	ldi	r26, 0x0B	; 11
 4e0:	b0 e0       	ldi	r27, 0x00	; 0
 4e2:	e5 e7       	ldi	r30, 0x75	; 117
 4e4:	f2 e0       	ldi	r31, 0x02	; 2
 4e6:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__prologue_saves__>
 4ea:	6c 01       	movw	r12, r24
 4ec:	7b 01       	movw	r14, r22
 4ee:	8a 01       	movw	r16, r20
 4f0:	fc 01       	movw	r30, r24
 4f2:	17 82       	std	Z+7, r1	; 0x07
 4f4:	16 82       	std	Z+6, r1	; 0x06
 4f6:	83 81       	ldd	r24, Z+3	; 0x03
 4f8:	81 ff       	sbrs	r24, 1
 4fa:	cc c1       	rjmp	.+920    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	3c 01       	movw	r6, r24
 502:	f6 01       	movw	r30, r12
 504:	93 81       	ldd	r25, Z+3	; 0x03
 506:	f7 01       	movw	r30, r14
 508:	93 fd       	sbrc	r25, 3
 50a:	85 91       	lpm	r24, Z+
 50c:	93 ff       	sbrs	r25, 3
 50e:	81 91       	ld	r24, Z+
 510:	7f 01       	movw	r14, r30
 512:	88 23       	and	r24, r24
 514:	09 f4       	brne	.+2      	; 0x518 <vfprintf+0x3a>
 516:	ba c1       	rjmp	.+884    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 518:	85 32       	cpi	r24, 0x25	; 37
 51a:	39 f4       	brne	.+14     	; 0x52a <vfprintf+0x4c>
 51c:	93 fd       	sbrc	r25, 3
 51e:	85 91       	lpm	r24, Z+
 520:	93 ff       	sbrs	r25, 3
 522:	81 91       	ld	r24, Z+
 524:	7f 01       	movw	r14, r30
 526:	85 32       	cpi	r24, 0x25	; 37
 528:	29 f4       	brne	.+10     	; 0x534 <vfprintf+0x56>
 52a:	b6 01       	movw	r22, r12
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 532:	e7 cf       	rjmp	.-50     	; 0x502 <vfprintf+0x24>
 534:	91 2c       	mov	r9, r1
 536:	21 2c       	mov	r2, r1
 538:	31 2c       	mov	r3, r1
 53a:	ff e1       	ldi	r31, 0x1F	; 31
 53c:	f3 15       	cp	r31, r3
 53e:	d8 f0       	brcs	.+54     	; 0x576 <vfprintf+0x98>
 540:	8b 32       	cpi	r24, 0x2B	; 43
 542:	79 f0       	breq	.+30     	; 0x562 <vfprintf+0x84>
 544:	38 f4       	brcc	.+14     	; 0x554 <vfprintf+0x76>
 546:	80 32       	cpi	r24, 0x20	; 32
 548:	79 f0       	breq	.+30     	; 0x568 <vfprintf+0x8a>
 54a:	83 32       	cpi	r24, 0x23	; 35
 54c:	a1 f4       	brne	.+40     	; 0x576 <vfprintf+0x98>
 54e:	23 2d       	mov	r18, r3
 550:	20 61       	ori	r18, 0x10	; 16
 552:	1d c0       	rjmp	.+58     	; 0x58e <vfprintf+0xb0>
 554:	8d 32       	cpi	r24, 0x2D	; 45
 556:	61 f0       	breq	.+24     	; 0x570 <vfprintf+0x92>
 558:	80 33       	cpi	r24, 0x30	; 48
 55a:	69 f4       	brne	.+26     	; 0x576 <vfprintf+0x98>
 55c:	23 2d       	mov	r18, r3
 55e:	21 60       	ori	r18, 0x01	; 1
 560:	16 c0       	rjmp	.+44     	; 0x58e <vfprintf+0xb0>
 562:	83 2d       	mov	r24, r3
 564:	82 60       	ori	r24, 0x02	; 2
 566:	38 2e       	mov	r3, r24
 568:	e3 2d       	mov	r30, r3
 56a:	e4 60       	ori	r30, 0x04	; 4
 56c:	3e 2e       	mov	r3, r30
 56e:	2a c0       	rjmp	.+84     	; 0x5c4 <vfprintf+0xe6>
 570:	f3 2d       	mov	r31, r3
 572:	f8 60       	ori	r31, 0x08	; 8
 574:	1d c0       	rjmp	.+58     	; 0x5b0 <vfprintf+0xd2>
 576:	37 fc       	sbrc	r3, 7
 578:	2d c0       	rjmp	.+90     	; 0x5d4 <vfprintf+0xf6>
 57a:	20 ed       	ldi	r18, 0xD0	; 208
 57c:	28 0f       	add	r18, r24
 57e:	2a 30       	cpi	r18, 0x0A	; 10
 580:	40 f0       	brcs	.+16     	; 0x592 <vfprintf+0xb4>
 582:	8e 32       	cpi	r24, 0x2E	; 46
 584:	b9 f4       	brne	.+46     	; 0x5b4 <vfprintf+0xd6>
 586:	36 fc       	sbrc	r3, 6
 588:	81 c1       	rjmp	.+770    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 58a:	23 2d       	mov	r18, r3
 58c:	20 64       	ori	r18, 0x40	; 64
 58e:	32 2e       	mov	r3, r18
 590:	19 c0       	rjmp	.+50     	; 0x5c4 <vfprintf+0xe6>
 592:	36 fe       	sbrs	r3, 6
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <vfprintf+0xc4>
 596:	8a e0       	ldi	r24, 0x0A	; 10
 598:	98 9e       	mul	r9, r24
 59a:	20 0d       	add	r18, r0
 59c:	11 24       	eor	r1, r1
 59e:	92 2e       	mov	r9, r18
 5a0:	11 c0       	rjmp	.+34     	; 0x5c4 <vfprintf+0xe6>
 5a2:	ea e0       	ldi	r30, 0x0A	; 10
 5a4:	2e 9e       	mul	r2, r30
 5a6:	20 0d       	add	r18, r0
 5a8:	11 24       	eor	r1, r1
 5aa:	22 2e       	mov	r2, r18
 5ac:	f3 2d       	mov	r31, r3
 5ae:	f0 62       	ori	r31, 0x20	; 32
 5b0:	3f 2e       	mov	r3, r31
 5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <vfprintf+0xe6>
 5b4:	8c 36       	cpi	r24, 0x6C	; 108
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <vfprintf+0xe2>
 5b8:	83 2d       	mov	r24, r3
 5ba:	80 68       	ori	r24, 0x80	; 128
 5bc:	38 2e       	mov	r3, r24
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <vfprintf+0xe6>
 5c0:	88 36       	cpi	r24, 0x68	; 104
 5c2:	41 f4       	brne	.+16     	; 0x5d4 <vfprintf+0xf6>
 5c4:	f7 01       	movw	r30, r14
 5c6:	93 fd       	sbrc	r25, 3
 5c8:	85 91       	lpm	r24, Z+
 5ca:	93 ff       	sbrs	r25, 3
 5cc:	81 91       	ld	r24, Z+
 5ce:	7f 01       	movw	r14, r30
 5d0:	81 11       	cpse	r24, r1
 5d2:	b3 cf       	rjmp	.-154    	; 0x53a <vfprintf+0x5c>
 5d4:	98 2f       	mov	r25, r24
 5d6:	9f 7d       	andi	r25, 0xDF	; 223
 5d8:	95 54       	subi	r25, 0x45	; 69
 5da:	93 30       	cpi	r25, 0x03	; 3
 5dc:	28 f4       	brcc	.+10     	; 0x5e8 <vfprintf+0x10a>
 5de:	0c 5f       	subi	r16, 0xFC	; 252
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	9f e3       	ldi	r25, 0x3F	; 63
 5e4:	99 83       	std	Y+1, r25	; 0x01
 5e6:	0d c0       	rjmp	.+26     	; 0x602 <vfprintf+0x124>
 5e8:	83 36       	cpi	r24, 0x63	; 99
 5ea:	31 f0       	breq	.+12     	; 0x5f8 <vfprintf+0x11a>
 5ec:	83 37       	cpi	r24, 0x73	; 115
 5ee:	71 f0       	breq	.+28     	; 0x60c <vfprintf+0x12e>
 5f0:	83 35       	cpi	r24, 0x53	; 83
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <vfprintf+0x118>
 5f4:	59 c0       	rjmp	.+178    	; 0x6a8 <vfprintf+0x1ca>
 5f6:	21 c0       	rjmp	.+66     	; 0x63a <vfprintf+0x15c>
 5f8:	f8 01       	movw	r30, r16
 5fa:	80 81       	ld	r24, Z
 5fc:	89 83       	std	Y+1, r24	; 0x01
 5fe:	0e 5f       	subi	r16, 0xFE	; 254
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	88 24       	eor	r8, r8
 604:	83 94       	inc	r8
 606:	91 2c       	mov	r9, r1
 608:	53 01       	movw	r10, r6
 60a:	13 c0       	rjmp	.+38     	; 0x632 <vfprintf+0x154>
 60c:	28 01       	movw	r4, r16
 60e:	f2 e0       	ldi	r31, 0x02	; 2
 610:	4f 0e       	add	r4, r31
 612:	51 1c       	adc	r5, r1
 614:	f8 01       	movw	r30, r16
 616:	a0 80       	ld	r10, Z
 618:	b1 80       	ldd	r11, Z+1	; 0x01
 61a:	36 fe       	sbrs	r3, 6
 61c:	03 c0       	rjmp	.+6      	; 0x624 <vfprintf+0x146>
 61e:	69 2d       	mov	r22, r9
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <vfprintf+0x14a>
 624:	6f ef       	ldi	r22, 0xFF	; 255
 626:	7f ef       	ldi	r23, 0xFF	; 255
 628:	c5 01       	movw	r24, r10
 62a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <strnlen>
 62e:	4c 01       	movw	r8, r24
 630:	82 01       	movw	r16, r4
 632:	f3 2d       	mov	r31, r3
 634:	ff 77       	andi	r31, 0x7F	; 127
 636:	3f 2e       	mov	r3, r31
 638:	16 c0       	rjmp	.+44     	; 0x666 <vfprintf+0x188>
 63a:	28 01       	movw	r4, r16
 63c:	22 e0       	ldi	r18, 0x02	; 2
 63e:	42 0e       	add	r4, r18
 640:	51 1c       	adc	r5, r1
 642:	f8 01       	movw	r30, r16
 644:	a0 80       	ld	r10, Z
 646:	b1 80       	ldd	r11, Z+1	; 0x01
 648:	36 fe       	sbrs	r3, 6
 64a:	03 c0       	rjmp	.+6      	; 0x652 <vfprintf+0x174>
 64c:	69 2d       	mov	r22, r9
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <vfprintf+0x178>
 652:	6f ef       	ldi	r22, 0xFF	; 255
 654:	7f ef       	ldi	r23, 0xFF	; 255
 656:	c5 01       	movw	r24, r10
 658:	0e 94 50 04 	call	0x8a0	; 0x8a0 <strnlen_P>
 65c:	4c 01       	movw	r8, r24
 65e:	f3 2d       	mov	r31, r3
 660:	f0 68       	ori	r31, 0x80	; 128
 662:	3f 2e       	mov	r3, r31
 664:	82 01       	movw	r16, r4
 666:	33 fc       	sbrc	r3, 3
 668:	1b c0       	rjmp	.+54     	; 0x6a0 <vfprintf+0x1c2>
 66a:	82 2d       	mov	r24, r2
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	88 16       	cp	r8, r24
 670:	99 06       	cpc	r9, r25
 672:	b0 f4       	brcc	.+44     	; 0x6a0 <vfprintf+0x1c2>
 674:	b6 01       	movw	r22, r12
 676:	80 e2       	ldi	r24, 0x20	; 32
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 67e:	2a 94       	dec	r2
 680:	f4 cf       	rjmp	.-24     	; 0x66a <vfprintf+0x18c>
 682:	f5 01       	movw	r30, r10
 684:	37 fc       	sbrc	r3, 7
 686:	85 91       	lpm	r24, Z+
 688:	37 fe       	sbrs	r3, 7
 68a:	81 91       	ld	r24, Z+
 68c:	5f 01       	movw	r10, r30
 68e:	b6 01       	movw	r22, r12
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 696:	21 10       	cpse	r2, r1
 698:	2a 94       	dec	r2
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	82 1a       	sub	r8, r18
 69e:	91 08       	sbc	r9, r1
 6a0:	81 14       	cp	r8, r1
 6a2:	91 04       	cpc	r9, r1
 6a4:	71 f7       	brne	.-36     	; 0x682 <vfprintf+0x1a4>
 6a6:	e8 c0       	rjmp	.+464    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 6a8:	84 36       	cpi	r24, 0x64	; 100
 6aa:	11 f0       	breq	.+4      	; 0x6b0 <vfprintf+0x1d2>
 6ac:	89 36       	cpi	r24, 0x69	; 105
 6ae:	41 f5       	brne	.+80     	; 0x700 <vfprintf+0x222>
 6b0:	f8 01       	movw	r30, r16
 6b2:	37 fe       	sbrs	r3, 7
 6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <vfprintf+0x1e6>
 6b6:	60 81       	ld	r22, Z
 6b8:	71 81       	ldd	r23, Z+1	; 0x01
 6ba:	82 81       	ldd	r24, Z+2	; 0x02
 6bc:	93 81       	ldd	r25, Z+3	; 0x03
 6be:	0c 5f       	subi	r16, 0xFC	; 252
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <vfprintf+0x1f6>
 6c4:	60 81       	ld	r22, Z
 6c6:	71 81       	ldd	r23, Z+1	; 0x01
 6c8:	07 2e       	mov	r0, r23
 6ca:	00 0c       	add	r0, r0
 6cc:	88 0b       	sbc	r24, r24
 6ce:	99 0b       	sbc	r25, r25
 6d0:	0e 5f       	subi	r16, 0xFE	; 254
 6d2:	1f 4f       	sbci	r17, 0xFF	; 255
 6d4:	f3 2d       	mov	r31, r3
 6d6:	ff 76       	andi	r31, 0x6F	; 111
 6d8:	3f 2e       	mov	r3, r31
 6da:	97 ff       	sbrs	r25, 7
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <vfprintf+0x212>
 6de:	90 95       	com	r25
 6e0:	80 95       	com	r24
 6e2:	70 95       	com	r23
 6e4:	61 95       	neg	r22
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	f0 68       	ori	r31, 0x80	; 128
 6ee:	3f 2e       	mov	r3, r31
 6f0:	2a e0       	ldi	r18, 0x0A	; 10
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	a3 01       	movw	r20, r6
 6f6:	0e 94 a2 04 	call	0x944	; 0x944 <__ultoa_invert>
 6fa:	88 2e       	mov	r8, r24
 6fc:	86 18       	sub	r8, r6
 6fe:	45 c0       	rjmp	.+138    	; 0x78a <vfprintf+0x2ac>
 700:	85 37       	cpi	r24, 0x75	; 117
 702:	31 f4       	brne	.+12     	; 0x710 <vfprintf+0x232>
 704:	23 2d       	mov	r18, r3
 706:	2f 7e       	andi	r18, 0xEF	; 239
 708:	b2 2e       	mov	r11, r18
 70a:	2a e0       	ldi	r18, 0x0A	; 10
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	25 c0       	rjmp	.+74     	; 0x75a <vfprintf+0x27c>
 710:	93 2d       	mov	r25, r3
 712:	99 7f       	andi	r25, 0xF9	; 249
 714:	b9 2e       	mov	r11, r25
 716:	8f 36       	cpi	r24, 0x6F	; 111
 718:	c1 f0       	breq	.+48     	; 0x74a <vfprintf+0x26c>
 71a:	18 f4       	brcc	.+6      	; 0x722 <vfprintf+0x244>
 71c:	88 35       	cpi	r24, 0x58	; 88
 71e:	79 f0       	breq	.+30     	; 0x73e <vfprintf+0x260>
 720:	b5 c0       	rjmp	.+362    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 722:	80 37       	cpi	r24, 0x70	; 112
 724:	19 f0       	breq	.+6      	; 0x72c <vfprintf+0x24e>
 726:	88 37       	cpi	r24, 0x78	; 120
 728:	21 f0       	breq	.+8      	; 0x732 <vfprintf+0x254>
 72a:	b0 c0       	rjmp	.+352    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 72c:	e9 2f       	mov	r30, r25
 72e:	e0 61       	ori	r30, 0x10	; 16
 730:	be 2e       	mov	r11, r30
 732:	b4 fe       	sbrs	r11, 4
 734:	0d c0       	rjmp	.+26     	; 0x750 <vfprintf+0x272>
 736:	fb 2d       	mov	r31, r11
 738:	f4 60       	ori	r31, 0x04	; 4
 73a:	bf 2e       	mov	r11, r31
 73c:	09 c0       	rjmp	.+18     	; 0x750 <vfprintf+0x272>
 73e:	34 fe       	sbrs	r3, 4
 740:	0a c0       	rjmp	.+20     	; 0x756 <vfprintf+0x278>
 742:	29 2f       	mov	r18, r25
 744:	26 60       	ori	r18, 0x06	; 6
 746:	b2 2e       	mov	r11, r18
 748:	06 c0       	rjmp	.+12     	; 0x756 <vfprintf+0x278>
 74a:	28 e0       	ldi	r18, 0x08	; 8
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	05 c0       	rjmp	.+10     	; 0x75a <vfprintf+0x27c>
 750:	20 e1       	ldi	r18, 0x10	; 16
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <vfprintf+0x27c>
 756:	20 e1       	ldi	r18, 0x10	; 16
 758:	32 e0       	ldi	r19, 0x02	; 2
 75a:	f8 01       	movw	r30, r16
 75c:	b7 fe       	sbrs	r11, 7
 75e:	07 c0       	rjmp	.+14     	; 0x76e <vfprintf+0x290>
 760:	60 81       	ld	r22, Z
 762:	71 81       	ldd	r23, Z+1	; 0x01
 764:	82 81       	ldd	r24, Z+2	; 0x02
 766:	93 81       	ldd	r25, Z+3	; 0x03
 768:	0c 5f       	subi	r16, 0xFC	; 252
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	06 c0       	rjmp	.+12     	; 0x77a <vfprintf+0x29c>
 76e:	60 81       	ld	r22, Z
 770:	71 81       	ldd	r23, Z+1	; 0x01
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 5f       	subi	r16, 0xFE	; 254
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	a3 01       	movw	r20, r6
 77c:	0e 94 a2 04 	call	0x944	; 0x944 <__ultoa_invert>
 780:	88 2e       	mov	r8, r24
 782:	86 18       	sub	r8, r6
 784:	fb 2d       	mov	r31, r11
 786:	ff 77       	andi	r31, 0x7F	; 127
 788:	3f 2e       	mov	r3, r31
 78a:	36 fe       	sbrs	r3, 6
 78c:	0d c0       	rjmp	.+26     	; 0x7a8 <vfprintf+0x2ca>
 78e:	23 2d       	mov	r18, r3
 790:	2e 7f       	andi	r18, 0xFE	; 254
 792:	a2 2e       	mov	r10, r18
 794:	89 14       	cp	r8, r9
 796:	58 f4       	brcc	.+22     	; 0x7ae <vfprintf+0x2d0>
 798:	34 fe       	sbrs	r3, 4
 79a:	0b c0       	rjmp	.+22     	; 0x7b2 <vfprintf+0x2d4>
 79c:	32 fc       	sbrc	r3, 2
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <vfprintf+0x2d4>
 7a0:	83 2d       	mov	r24, r3
 7a2:	8e 7e       	andi	r24, 0xEE	; 238
 7a4:	a8 2e       	mov	r10, r24
 7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <vfprintf+0x2d4>
 7a8:	b8 2c       	mov	r11, r8
 7aa:	a3 2c       	mov	r10, r3
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <vfprintf+0x2d6>
 7ae:	b8 2c       	mov	r11, r8
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <vfprintf+0x2d6>
 7b2:	b9 2c       	mov	r11, r9
 7b4:	a4 fe       	sbrs	r10, 4
 7b6:	0f c0       	rjmp	.+30     	; 0x7d6 <vfprintf+0x2f8>
 7b8:	fe 01       	movw	r30, r28
 7ba:	e8 0d       	add	r30, r8
 7bc:	f1 1d       	adc	r31, r1
 7be:	80 81       	ld	r24, Z
 7c0:	80 33       	cpi	r24, 0x30	; 48
 7c2:	21 f4       	brne	.+8      	; 0x7cc <vfprintf+0x2ee>
 7c4:	9a 2d       	mov	r25, r10
 7c6:	99 7e       	andi	r25, 0xE9	; 233
 7c8:	a9 2e       	mov	r10, r25
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <vfprintf+0x300>
 7cc:	a2 fe       	sbrs	r10, 2
 7ce:	06 c0       	rjmp	.+12     	; 0x7dc <vfprintf+0x2fe>
 7d0:	b3 94       	inc	r11
 7d2:	b3 94       	inc	r11
 7d4:	04 c0       	rjmp	.+8      	; 0x7de <vfprintf+0x300>
 7d6:	8a 2d       	mov	r24, r10
 7d8:	86 78       	andi	r24, 0x86	; 134
 7da:	09 f0       	breq	.+2      	; 0x7de <vfprintf+0x300>
 7dc:	b3 94       	inc	r11
 7de:	a3 fc       	sbrc	r10, 3
 7e0:	11 c0       	rjmp	.+34     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e2:	a0 fe       	sbrs	r10, 0
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <vfprintf+0x314>
 7e6:	b2 14       	cp	r11, r2
 7e8:	88 f4       	brcc	.+34     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ea:	28 0c       	add	r2, r8
 7ec:	92 2c       	mov	r9, r2
 7ee:	9b 18       	sub	r9, r11
 7f0:	0e c0       	rjmp	.+28     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f2:	b2 14       	cp	r11, r2
 7f4:	60 f4       	brcc	.+24     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f6:	b6 01       	movw	r22, r12
 7f8:	80 e2       	ldi	r24, 0x20	; 32
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 800:	b3 94       	inc	r11
 802:	f7 cf       	rjmp	.-18     	; 0x7f2 <vfprintf+0x314>
 804:	b2 14       	cp	r11, r2
 806:	18 f4       	brcc	.+6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 808:	2b 18       	sub	r2, r11
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	98 2c       	mov	r9, r8
 80e:	21 2c       	mov	r2, r1
 810:	a4 fe       	sbrs	r10, 4
 812:	10 c0       	rjmp	.+32     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 814:	b6 01       	movw	r22, r12
 816:	80 e3       	ldi	r24, 0x30	; 48
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 81e:	a2 fe       	sbrs	r10, 2
 820:	17 c0       	rjmp	.+46     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 822:	a1 fc       	sbrc	r10, 1
 824:	03 c0       	rjmp	.+6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 826:	88 e7       	ldi	r24, 0x78	; 120
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	88 e5       	ldi	r24, 0x58	; 88
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	b6 01       	movw	r22, r12
 832:	0c c0       	rjmp	.+24     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 834:	8a 2d       	mov	r24, r10
 836:	86 78       	andi	r24, 0x86	; 134
 838:	59 f0       	breq	.+22     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 83a:	a1 fe       	sbrs	r10, 1
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	8b e2       	ldi	r24, 0x2B	; 43
 840:	01 c0       	rjmp	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	a7 fc       	sbrc	r10, 7
 846:	8d e2       	ldi	r24, 0x2D	; 45
 848:	b6 01       	movw	r22, r12
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 850:	89 14       	cp	r8, r9
 852:	38 f4       	brcc	.+14     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 854:	b6 01       	movw	r22, r12
 856:	80 e3       	ldi	r24, 0x30	; 48
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 85e:	9a 94       	dec	r9
 860:	f7 cf       	rjmp	.-18     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 862:	8a 94       	dec	r8
 864:	f3 01       	movw	r30, r6
 866:	e8 0d       	add	r30, r8
 868:	f1 1d       	adc	r31, r1
 86a:	80 81       	ld	r24, Z
 86c:	b6 01       	movw	r22, r12
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 874:	81 10       	cpse	r8, r1
 876:	f5 cf       	rjmp	.-22     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 878:	22 20       	and	r2, r2
 87a:	09 f4       	brne	.+2      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 87c:	42 ce       	rjmp	.-892    	; 0x502 <vfprintf+0x24>
 87e:	b6 01       	movw	r22, r12
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 888:	2a 94       	dec	r2
 88a:	f6 cf       	rjmp	.-20     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 88c:	f6 01       	movw	r30, r12
 88e:	86 81       	ldd	r24, Z+6	; 0x06
 890:	97 81       	ldd	r25, Z+7	; 0x07
 892:	02 c0       	rjmp	.+4      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	9f ef       	ldi	r25, 0xFF	; 255
 898:	2b 96       	adiw	r28, 0x0b	; 11
 89a:	e2 e1       	ldi	r30, 0x12	; 18
 89c:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__epilogue_restores__>

000008a0 <strnlen_P>:
 8a0:	fc 01       	movw	r30, r24
 8a2:	05 90       	lpm	r0, Z+
 8a4:	61 50       	subi	r22, 0x01	; 1
 8a6:	70 40       	sbci	r23, 0x00	; 0
 8a8:	01 10       	cpse	r0, r1
 8aa:	d8 f7       	brcc	.-10     	; 0x8a2 <strnlen_P+0x2>
 8ac:	80 95       	com	r24
 8ae:	90 95       	com	r25
 8b0:	8e 0f       	add	r24, r30
 8b2:	9f 1f       	adc	r25, r31
 8b4:	08 95       	ret

000008b6 <strnlen>:
 8b6:	fc 01       	movw	r30, r24
 8b8:	61 50       	subi	r22, 0x01	; 1
 8ba:	70 40       	sbci	r23, 0x00	; 0
 8bc:	01 90       	ld	r0, Z+
 8be:	01 10       	cpse	r0, r1
 8c0:	d8 f7       	brcc	.-10     	; 0x8b8 <strnlen+0x2>
 8c2:	80 95       	com	r24
 8c4:	90 95       	com	r25
 8c6:	8e 0f       	add	r24, r30
 8c8:	9f 1f       	adc	r25, r31
 8ca:	08 95       	ret

000008cc <fputc>:
 8cc:	0f 93       	push	r16
 8ce:	1f 93       	push	r17
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	fb 01       	movw	r30, r22
 8d6:	23 81       	ldd	r18, Z+3	; 0x03
 8d8:	21 fd       	sbrc	r18, 1
 8da:	03 c0       	rjmp	.+6      	; 0x8e2 <fputc+0x16>
 8dc:	8f ef       	ldi	r24, 0xFF	; 255
 8de:	9f ef       	ldi	r25, 0xFF	; 255
 8e0:	2c c0       	rjmp	.+88     	; 0x93a <__stack+0x3b>
 8e2:	22 ff       	sbrs	r18, 2
 8e4:	16 c0       	rjmp	.+44     	; 0x912 <__stack+0x13>
 8e6:	46 81       	ldd	r20, Z+6	; 0x06
 8e8:	57 81       	ldd	r21, Z+7	; 0x07
 8ea:	24 81       	ldd	r18, Z+4	; 0x04
 8ec:	35 81       	ldd	r19, Z+5	; 0x05
 8ee:	42 17       	cp	r20, r18
 8f0:	53 07       	cpc	r21, r19
 8f2:	44 f4       	brge	.+16     	; 0x904 <__stack+0x5>
 8f4:	a0 81       	ld	r26, Z
 8f6:	b1 81       	ldd	r27, Z+1	; 0x01
 8f8:	9d 01       	movw	r18, r26
 8fa:	2f 5f       	subi	r18, 0xFF	; 255
 8fc:	3f 4f       	sbci	r19, 0xFF	; 255
 8fe:	31 83       	std	Z+1, r19	; 0x01
 900:	20 83       	st	Z, r18
 902:	8c 93       	st	X, r24
 904:	26 81       	ldd	r18, Z+6	; 0x06
 906:	37 81       	ldd	r19, Z+7	; 0x07
 908:	2f 5f       	subi	r18, 0xFF	; 255
 90a:	3f 4f       	sbci	r19, 0xFF	; 255
 90c:	37 83       	std	Z+7, r19	; 0x07
 90e:	26 83       	std	Z+6, r18	; 0x06
 910:	14 c0       	rjmp	.+40     	; 0x93a <__stack+0x3b>
 912:	8b 01       	movw	r16, r22
 914:	ec 01       	movw	r28, r24
 916:	fb 01       	movw	r30, r22
 918:	00 84       	ldd	r0, Z+8	; 0x08
 91a:	f1 85       	ldd	r31, Z+9	; 0x09
 91c:	e0 2d       	mov	r30, r0
 91e:	09 95       	icall
 920:	89 2b       	or	r24, r25
 922:	e1 f6       	brne	.-72     	; 0x8dc <fputc+0x10>
 924:	d8 01       	movw	r26, r16
 926:	16 96       	adiw	r26, 0x06	; 6
 928:	8d 91       	ld	r24, X+
 92a:	9c 91       	ld	r25, X
 92c:	17 97       	sbiw	r26, 0x07	; 7
 92e:	01 96       	adiw	r24, 0x01	; 1
 930:	17 96       	adiw	r26, 0x07	; 7
 932:	9c 93       	st	X, r25
 934:	8e 93       	st	-X, r24
 936:	16 97       	sbiw	r26, 0x06	; 6
 938:	ce 01       	movw	r24, r28
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	08 95       	ret

00000944 <__ultoa_invert>:
 944:	fa 01       	movw	r30, r20
 946:	aa 27       	eor	r26, r26
 948:	28 30       	cpi	r18, 0x08	; 8
 94a:	51 f1       	breq	.+84     	; 0x9a0 <__ultoa_invert+0x5c>
 94c:	20 31       	cpi	r18, 0x10	; 16
 94e:	81 f1       	breq	.+96     	; 0x9b0 <__ultoa_invert+0x6c>
 950:	e8 94       	clt
 952:	6f 93       	push	r22
 954:	6e 7f       	andi	r22, 0xFE	; 254
 956:	6e 5f       	subi	r22, 0xFE	; 254
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	af 4f       	sbci	r26, 0xFF	; 255
 960:	b1 e0       	ldi	r27, 0x01	; 1
 962:	3e d0       	rcall	.+124    	; 0x9e0 <__ultoa_invert+0x9c>
 964:	b4 e0       	ldi	r27, 0x04	; 4
 966:	3c d0       	rcall	.+120    	; 0x9e0 <__ultoa_invert+0x9c>
 968:	67 0f       	add	r22, r23
 96a:	78 1f       	adc	r23, r24
 96c:	89 1f       	adc	r24, r25
 96e:	9a 1f       	adc	r25, r26
 970:	a1 1d       	adc	r26, r1
 972:	68 0f       	add	r22, r24
 974:	79 1f       	adc	r23, r25
 976:	8a 1f       	adc	r24, r26
 978:	91 1d       	adc	r25, r1
 97a:	a1 1d       	adc	r26, r1
 97c:	6a 0f       	add	r22, r26
 97e:	71 1d       	adc	r23, r1
 980:	81 1d       	adc	r24, r1
 982:	91 1d       	adc	r25, r1
 984:	a1 1d       	adc	r26, r1
 986:	20 d0       	rcall	.+64     	; 0x9c8 <__ultoa_invert+0x84>
 988:	09 f4       	brne	.+2      	; 0x98c <__ultoa_invert+0x48>
 98a:	68 94       	set
 98c:	3f 91       	pop	r19
 98e:	2a e0       	ldi	r18, 0x0A	; 10
 990:	26 9f       	mul	r18, r22
 992:	11 24       	eor	r1, r1
 994:	30 19       	sub	r19, r0
 996:	30 5d       	subi	r19, 0xD0	; 208
 998:	31 93       	st	Z+, r19
 99a:	de f6       	brtc	.-74     	; 0x952 <__ultoa_invert+0xe>
 99c:	cf 01       	movw	r24, r30
 99e:	08 95       	ret
 9a0:	46 2f       	mov	r20, r22
 9a2:	47 70       	andi	r20, 0x07	; 7
 9a4:	40 5d       	subi	r20, 0xD0	; 208
 9a6:	41 93       	st	Z+, r20
 9a8:	b3 e0       	ldi	r27, 0x03	; 3
 9aa:	0f d0       	rcall	.+30     	; 0x9ca <__ultoa_invert+0x86>
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__ultoa_invert+0x5c>
 9ae:	f6 cf       	rjmp	.-20     	; 0x99c <__ultoa_invert+0x58>
 9b0:	46 2f       	mov	r20, r22
 9b2:	4f 70       	andi	r20, 0x0F	; 15
 9b4:	40 5d       	subi	r20, 0xD0	; 208
 9b6:	4a 33       	cpi	r20, 0x3A	; 58
 9b8:	18 f0       	brcs	.+6      	; 0x9c0 <__ultoa_invert+0x7c>
 9ba:	49 5d       	subi	r20, 0xD9	; 217
 9bc:	31 fd       	sbrc	r19, 1
 9be:	40 52       	subi	r20, 0x20	; 32
 9c0:	41 93       	st	Z+, r20
 9c2:	02 d0       	rcall	.+4      	; 0x9c8 <__ultoa_invert+0x84>
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__ultoa_invert+0x6c>
 9c6:	ea cf       	rjmp	.-44     	; 0x99c <__ultoa_invert+0x58>
 9c8:	b4 e0       	ldi	r27, 0x04	; 4
 9ca:	a6 95       	lsr	r26
 9cc:	97 95       	ror	r25
 9ce:	87 95       	ror	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	ba 95       	dec	r27
 9d6:	c9 f7       	brne	.-14     	; 0x9ca <__ultoa_invert+0x86>
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	61 05       	cpc	r22, r1
 9dc:	71 05       	cpc	r23, r1
 9de:	08 95       	ret
 9e0:	9b 01       	movw	r18, r22
 9e2:	ac 01       	movw	r20, r24
 9e4:	0a 2e       	mov	r0, r26
 9e6:	06 94       	lsr	r0
 9e8:	57 95       	ror	r21
 9ea:	47 95       	ror	r20
 9ec:	37 95       	ror	r19
 9ee:	27 95       	ror	r18
 9f0:	ba 95       	dec	r27
 9f2:	c9 f7       	brne	.-14     	; 0x9e6 <__ultoa_invert+0xa2>
 9f4:	62 0f       	add	r22, r18
 9f6:	73 1f       	adc	r23, r19
 9f8:	84 1f       	adc	r24, r20
 9fa:	95 1f       	adc	r25, r21
 9fc:	a0 1d       	adc	r26, r0
 9fe:	08 95       	ret

00000a00 <__prologue_saves__>:
 a00:	2f 92       	push	r2
 a02:	3f 92       	push	r3
 a04:	4f 92       	push	r4
 a06:	5f 92       	push	r5
 a08:	6f 92       	push	r6
 a0a:	7f 92       	push	r7
 a0c:	8f 92       	push	r8
 a0e:	9f 92       	push	r9
 a10:	af 92       	push	r10
 a12:	bf 92       	push	r11
 a14:	cf 92       	push	r12
 a16:	df 92       	push	r13
 a18:	ef 92       	push	r14
 a1a:	ff 92       	push	r15
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	cd b7       	in	r28, 0x3d	; 61
 a26:	de b7       	in	r29, 0x3e	; 62
 a28:	ca 1b       	sub	r28, r26
 a2a:	db 0b       	sbc	r29, r27
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	de bf       	out	0x3e, r29	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	cd bf       	out	0x3d, r28	; 61
 a36:	09 94       	ijmp

00000a38 <__epilogue_restores__>:
 a38:	2a 88       	ldd	r2, Y+18	; 0x12
 a3a:	39 88       	ldd	r3, Y+17	; 0x11
 a3c:	48 88       	ldd	r4, Y+16	; 0x10
 a3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a40:	6e 84       	ldd	r6, Y+14	; 0x0e
 a42:	7d 84       	ldd	r7, Y+13	; 0x0d
 a44:	8c 84       	ldd	r8, Y+12	; 0x0c
 a46:	9b 84       	ldd	r9, Y+11	; 0x0b
 a48:	aa 84       	ldd	r10, Y+10	; 0x0a
 a4a:	b9 84       	ldd	r11, Y+9	; 0x09
 a4c:	c8 84       	ldd	r12, Y+8	; 0x08
 a4e:	df 80       	ldd	r13, Y+7	; 0x07
 a50:	ee 80       	ldd	r14, Y+6	; 0x06
 a52:	fd 80       	ldd	r15, Y+5	; 0x05
 a54:	0c 81       	ldd	r16, Y+4	; 0x04
 a56:	1b 81       	ldd	r17, Y+3	; 0x03
 a58:	aa 81       	ldd	r26, Y+2	; 0x02
 a5a:	b9 81       	ldd	r27, Y+1	; 0x01
 a5c:	ce 0f       	add	r28, r30
 a5e:	d1 1d       	adc	r29, r1
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	f8 94       	cli
 a64:	de bf       	out	0x3e, r29	; 62
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	cd bf       	out	0x3d, r28	; 61
 a6a:	ed 01       	movw	r28, r26
 a6c:	08 95       	ret

00000a6e <_exit>:
 a6e:	f8 94       	cli

00000a70 <__stop_program>:
 a70:	ff cf       	rjmp	.-2      	; 0xa70 <__stop_program>
